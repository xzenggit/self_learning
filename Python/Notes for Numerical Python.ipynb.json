{
 "metadata": {
  "name": "",
  "signature": "sha256:946787bbc54a7d25a5c969447f685c49f64527ebd5a94f1d4356d69ca0296364"
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## [Notes for Numerical Python](http://www.amazon.com/Numerical-Python-Practical-Techniques-Approach/dp/1484205545)\n",
      "\n",
      "### Ch1. Introduction\n",
      "For a complete list of available extension commands type `%lsmagic`. Some magic commands are very similar as the linux shell commands, such as `%ls`, `%pwd`, `%cd`.\n",
      "\n",
      "`%timeit`: run a Python statement a number of times and gives an estimate of the runtime, but does not return the value of the statement.\n",
      "`%time`: just run one time, but return the value.\n",
      "\n",
      "Both `%timeit` and `%time` do not give any detailed information about which part of the computation takes more time. Such analysis requires the code profiler, which is the command `%prun` or `%run` with flag -p.  \n",
      "Example: %prun test.py\n",
      "\n",
      "[IPython Notebook shotcuts](http://johnlaudun.org/20131228-ipython-notebook-keyboard-shortcuts/)\n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Example\n",
      "def fib(n):\n",
      "    \"\"\"\n",
      "    Return a list of the first n Fibonacci numbers.\n",
      "    \"\"\"\n",
      "    f0, f1 = 0, 1\n",
      "    f = [1] * n\n",
      "    for i in range(1, n):\n",
      "        f[i] = f0 + f1\n",
      "        f0, f1 = f1, f[i]\n",
      "    return f\n",
      "\n",
      "%timeit fib(50)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "100000 loops, best of 3: 11.5 \u00b5s per loop\n"
       ]
      }
     ],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "%time result = fib(50)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "CPU times: user 0 ns, sys: 0 ns, total: 0 ns\n",
        "Wall time: 35 \u00b5s\n"
       ]
      }
     ],
     "prompt_number": 3
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Ch2. Vectors, Matrices, and Arrays\n",
      "\n",
      "Basic attributes of the ndarray class: `shape, size, ndim, nbytes, dtype`\n",
      "\n",
      "Order of Array Data in Memory: \n",
      "* `order='C'` is row-major format\n",
      "* `order='F'` is column-major format\n",
      "\n",
      "Functions for generating arrays:\n",
      "* np.array: create an array for which the elements are given by an array-like object\n",
      "* np.zeros: create an array with the specified dimensions and data type filled with zeros\n",
      "* np.ones: similar as np.zeros, but filled with 1s\n",
      "* np.diag: create a diagonal array with specified values along the diagonal, and zeros elsewhere\n",
      "* np.arange: create an array with evenly spaced values between start, end, and with increment values\n",
      "* np.linspace: evenly spaced values between start and end, using a specified number of elements\n",
      "* np.logspace: similar as np.linspace, but in log scale\n",
      "* np.meshgrid: similar as np.linspace, but generate high-dimensional coordinate arrays\n",
      "* np.fromfunction: create array filled with values given by certain function\n",
      "* np.fromfile: create array with data from a binary file\n",
      "* np.genfromtxt: create array from data read from a text file\n",
      "* np.random.rand: generate random array\n",
      "* np.ones_like(x): create array like the shape of x, but filled with ones\n",
      "* np.zeros_like(x): similar as np.ones_like(x), but filled with zeros\n",
      "* np.full(n, x): create array as np.ones(n)*x\n",
      "\n",
      "Indexing and Slicing:\n",
      "* a[m]: select element at index m (index starts from 0)\n",
      "* a[-m]: select the mth element from the end of the list\n",
      "* a[m:n]: select elements with index from m to n-1\n",
      "* a[:] or a[0:-1]: select all elements\n",
      "* a[m:n:p]: select elements with index m through n(exclusive), with increment p\n",
      "* a[::-1]: select all elements in reverse order\n",
      "\n",
      "Subarrays that are extracted from arrays using slice operations are alternative views of the same underlying array data. That is, they are arrays that refer to the same data in memory as the original array, but with a different strides configuration. When the elements in a view assigend new values, the values of original array are therefore also updated. If you want to use a copy, please use scripts like 'B = A[1:3, 1:3].copy()'.\n",
      "\n",
      "Unlike arrays created by using slices, the arrays returned using fancy indexing and Boolean-valued indexing are not views, but rather new independent arrays. So the original array will not be affected.\n",
      "\n",
      "Reshaping and Resizing:\n",
      "* np.reshape: reshape an N-d array\n",
      "* np.ndarray.flatten: create a copy of N-d array as one-dimension\n",
      "* np.ravel: create a view of an N-d array as one-dimension\n",
      "* np.squeeze: remove axis with length 1\n",
      "* np.expand_dims, np.newaxis: add a new axis of length 1\n",
      "* np.transpose: Transpose the array\n",
      "* np.hstack: stack a list of arrays horizontally\n",
      "* hp.vstack: stack arrays vertically\n",
      "* np.dstack: stack array depth-wise (along axis 2)\n",
      "* np.concatenate: create a new array by appending arrays after each other, along a given axis\n",
      "* np.resize: resize an array\n",
      "* np.append: append an element to an array\n",
      "* np.insert: insert a new element at given position\n",
      "* np.delete: delete an element at given position\n",
      "\n",
      "The standard arithmetic operations with NumPy arrays perform elementwise operations.\n",
      "\n",
      "Functions for calculating aggregates: np.mean, np.std, np.sum, np.var, np.prod, np.cumsum, np.cumprod, np.min, np.max\n",
      "* np.argmin, np.argmax: the index of the minimum/maximum value in array\n",
      "* np.all: return True if all elements in the argument array are nonzero\n",
      "* np.any: return True if any of the elements in the argument array is nonzero\n",
      "\n",
      "Functions for conditional and logical expressions:\n",
      "* np.where: choose values from two arrays depending on the value of a condition array.\n",
      "* np.choose: choose values from a list of arrays depending on the values of a given index array.\n",
      "* np.select: choose values from a list of arrays depending on a list of conditions.\n",
      "* np.nonzero: return an array with indices of nonzero elements.\n",
      "* np.logical_and: perform an elementwise AND operation.\n",
      "* np.logical_or, np.logical_xor: elementwise OR/XOR operation.\n",
      "* np.logical_not: elementwise NOT operation.\n",
      "\n",
      "Functions for operating on sets:\n",
      "* np.unique: create a new array with unique elemtns \n",
      "* np.in1d: test for the existence of an array of elements in another array\n",
      "* np.intersect1d: return an array with elements that are contained in two given arrays\n",
      "* np.setdiff1d: return an array with elements that are contained in one but but not other arrays\n",
      "* np.union1d: union two arrays\n",
      "\n",
      "Functions for array operations:\n",
      "* np.transpose, np.ndarray.transpose, np.ndarray.T: transpose of an array\n",
      "* np.fliplr, np.flipud: flip left right or up down of an array\n",
      "* np.rot90: rotate the elements of an array\n",
      "* np.sort, np.ndarray.sort: sort the element of an array along given axis\n",
      "\n",
      "Functions for matrix operations:\n",
      "* np.dot: matrxi multiplication\n",
      "* np.inner: scale multiplication\n",
      "* np.cross: cross product between two arrays\n",
      "* np.tensordot: Dot product along specified axis of an array\n",
      "* np.outer: tensor product between two arrays\n",
      "* np.kron: Kronecker product \n",
      "* np.einsum: Evaluates Einsteins' summation\n",
      "\n",
      "[the Guide to NumPy](http://web.mit.edu/dvp/Public/numpybook.pdf)"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Numpy Examples\n",
      "import numpy as np\n",
      "a = np.array([1, 2, 3], dtype=np.int)\n",
      "print a\n",
      "print a.shape\n",
      "print a.size\n",
      "print a.ndim\n",
      "print a.nbytes\n",
      "print a.dtype"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "[1 2 3]\n",
        "(3,)\n",
        "3\n",
        "1\n",
        "24\n",
        "int64\n"
       ]
      }
     ],
     "prompt_number": 6
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print np.zeros((2, 3))\n",
      "print np.ones(4)\n",
      "print np.empty(5, dtype = np.float)  # empty array filled with random values"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "[[ 0.  0.  0.]\n",
        " [ 0.  0.  0.]]\n",
        "[ 1.  1.  1.  1.]\n",
        "[ 0.    0.25  0.5   0.75  1.  ]\n"
       ]
      }
     ],
     "prompt_number": 8
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# np.arange doesn't include the end value\n",
      "# np.linspace include the end value\n",
      "print np.arange(0.0, 10, 1)\n",
      "print np.linspace(0, 10, 11)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "[ 0.  1.  2.  3.  4.  5.  6.  7.  8.  9.]\n",
        "[  0.   1.   2.   3.   4.   5.   6.   7.   8.   9.  10.]\n"
       ]
      }
     ],
     "prompt_number": 11
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "x = np.array([-1, 0, 1])\n",
      "y = np.array([-2, 0, 2])\n",
      "X, Y = np.meshgrid(x, y)\n",
      "print X\n",
      "print Y"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "[[-1  0  1]\n",
        " [-1  0  1]\n",
        " [-1  0  1]]\n",
        "[[-2 -2 -2]\n",
        " [ 0  0  0]\n",
        " [ 2  2  2]]\n"
       ]
      }
     ],
     "prompt_number": 13
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print x\n",
      "print np.ones_like(x)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "[-1  0  1]\n",
        "[1 1 1]\n"
       ]
      }
     ],
     "prompt_number": 18
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "np.full(5, 3.0)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 17,
       "text": [
        "array([ 3.,  3.,  3.,  3.,  3.])"
       ]
      }
     ],
     "prompt_number": 17
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Multidimensional Arrays Indexing\n",
      "f = lambda m, n: n + 10 * m\n",
      "A = np.fromfunction(f, (6, 6), dtype=int)\n",
      "print A\n",
      "print 'The 2nd column is', A[:, 1] \n",
      "print 'The 2nd row is', A[1, :]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "[[ 0  1  2  3  4  5]\n",
        " [10 11 12 13 14 15]\n",
        " [20 21 22 23 24 25]\n",
        " [30 31 32 33 34 35]\n",
        " [40 41 42 43 44 45]\n",
        " [50 51 52 53 54 55]]\n",
        "The 2nd column is [ 1 11 21 31 41 51]\n",
        "The 2nd row is [10 11 12 13 14 15]\n"
       ]
      }
     ],
     "prompt_number": 21
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print A[:3, :3]     # upper half block\n",
      "print A[3:, :3]     # lower half block\n",
      "print A[::2, ::2]   # every second element, start from 0, 0\n",
      "print A[1::2, 1::3] # every second and third element start from 1, 1"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "[[ 0  1  2]\n",
        " [10 11 12]\n",
        " [20 21 22]]\n",
        "[[30 31 32]\n",
        " [40 41 42]\n",
        " [50 51 52]]\n",
        "[[ 0  2  4]\n",
        " [20 22 24]\n",
        " [40 42 44]]\n",
        "[[11 14]\n",
        " [31 34]\n",
        " [51 54]]\n"
       ]
      }
     ],
     "prompt_number": 23
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Views\n",
      "# If views are changed, the original array will also be changed.\n",
      "# If you just want a copy, please use B=A[1:5, 1:5].copy()\n",
      "B = A[1:5, 1:5]\n",
      "print B\n",
      "print A\n",
      "B[:, :] = 0\n",
      "print A"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "[[11 12 13 14]\n",
        " [21 22 23 24]\n",
        " [31 32 33 34]\n",
        " [41 42 43 44]]\n",
        "[[ 0  1  2  3  4  5]\n",
        " [10 11 12 13 14 15]\n",
        " [20 21 22 23 24 25]\n",
        " [30 31 32 33 34 35]\n",
        " [40 41 42 43 44 45]\n",
        " [50 51 52 53 54 55]]\n",
        "[[ 0  1  2  3  4  5]\n",
        " [10  0  0  0  0 15]\n",
        " [20  0  0  0  0 25]\n",
        " [30  0  0  0  0 35]\n",
        " [40  0  0  0  0 45]\n",
        " [50 51 52 53 54 55]]\n"
       ]
      }
     ],
     "prompt_number": 24
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "A = np.linspace(0, 1, 11)\n",
      "print A\n",
      "B = A[0:3].copy()\n",
      "print B\n",
      "B[:] = 0\n",
      "print B\n",
      "print A"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "[ 0.   0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9  1. ]\n",
        "[ 0.   0.1  0.2]\n",
        "[ 0.  0.  0.]\n",
        "[ 0.   0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9  1. ]\n"
       ]
      }
     ],
     "prompt_number": 26
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Fancy Indexing\n",
      "A = np.linspace(0, 1, 11)\n",
      "print A\n",
      "print A[np.array([0, 2, 4])]\n",
      "print A[A > 0.5]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "[ 0.   0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9  1. ]\n",
        "[ 0.   0.2  0.4]\n",
        "[ 0.6  0.7  0.8  0.9  1. ]\n"
       ]
      }
     ],
     "prompt_number": 25
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Arrays created using Fancy Indexing won't affect the original array\n",
      "A = np.linspace(0, 1, 11)\n",
      "ind = [2, 4, 6]\n",
      "B = A[ind]\n",
      "print B\n",
      "B[:] = 0\n",
      "print B\n",
      "print A\n",
      "C = A[A > 0.5]\n",
      "print C\n",
      "C[:] = 0\n",
      "print C\n",
      "print A"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "[ 0.2  0.4  0.6]\n",
        "[ 0.  0.  0.]\n",
        "[ 0.   0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9  1. ]\n",
        "[ 0.6  0.7  0.8  0.9  1. ]\n",
        "[ 0.  0.  0.  0.  0.]\n",
        "[ 0.   0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9  1. ]\n"
       ]
      }
     ],
     "prompt_number": 28
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Reshaping and Resizing\n",
      "a = np.array([[1, 2], [3, 4]])\n",
      "print a\n",
      "print np.reshape(a, (1, 4))\n",
      "print a.reshape(4)\n",
      "print a.flatten()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "[[1 2]\n",
        " [3 4]]\n",
        "[[1 2 3 4]]\n",
        "[1 2 3 4]\n",
        "[1 2 3 4]\n"
       ]
      }
     ],
     "prompt_number": 31
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "a = np.arange(0, 5)\n",
      "column = a[:, np.newaxis]\n",
      "row = a[np.newaxis, :]\n",
      "print a\n",
      "print column\n",
      "print row"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "[0 1 2 3 4]\n",
        "[[0]\n",
        " [1]\n",
        " [2]\n",
        " [3]\n",
        " [4]]\n",
        "[[0 1 2 3 4]]\n"
       ]
      }
     ],
     "prompt_number": 32
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "a = np.arange(5)\n",
      "print a\n",
      "print np.vstack((a, a, a))\n",
      "print np.hstack((a, a, a))\n",
      "print np.dstack((a, a, a))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "[0 1 2 3 4]\n",
        "[[0 1 2 3 4]\n",
        " [0 1 2 3 4]\n",
        " [0 1 2 3 4]]\n",
        "[0 1 2 3 4 0 1 2 3 4 0 1 2 3 4]\n",
        "[[[0 0 0]\n",
        "  [1 1 1]\n",
        "  [2 2 2]\n",
        "  [3 3 3]\n",
        "  [4 4 4]]]\n"
       ]
      }
     ],
     "prompt_number": 33
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "a = np.arange(1, 10).reshape(3, 3)\n",
      "print a\n",
      "print a.sum()\n",
      "print a.sum(axis=0)\n",
      "print a.sum(axis=1)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "[[1 2 3]\n",
        " [4 5 6]\n",
        " [7 8 9]]\n",
        "45\n",
        "[12 15 18]\n",
        "[ 6 15 24]\n"
       ]
      }
     ],
     "prompt_number": 34
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Array comparison\n",
      "a = np.array([1, 2, 3, 4])\n",
      "b = np.array([4, 3, 2, 1])\n",
      "a < b"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 1,
       "text": [
        "array([ True,  True, False, False], dtype=bool)"
       ]
      }
     ],
     "prompt_number": 1
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print np.all(a < b)\n",
      "print np.any(a < b)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "False\n",
        "True\n"
       ]
      }
     ],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# np.where(arg1, arg2, arg3) function selects elements from two arrays\n",
      "# arg2 and arg3, given a Boolean-valued array condition(arg1)\n",
      "x = np.linspace(-4, 4, 9)\n",
      "np.where(x < 0, x**2, x**3)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 3,
       "text": [
        "array([ 16.,   9.,   4.,   1.,   0.,   1.,   8.,  27.,  64.])"
       ]
      }
     ],
     "prompt_number": 3
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# np.select([list of Boolean-value condition arrays], [coresponding arrays])\n",
      "# Similar as np.where, but in a more complex way.\n",
      "np.select([x < -1, x < 2, x >= 2], [x**2, x**3, x**4])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 4,
       "text": [
        "array([  16.,    9.,    4.,   -1.,    0.,    1.,   16.,   81.,  256.])"
       ]
      }
     ],
     "prompt_number": 4
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# np.choose() takes as a first argument a list or array with indices that \n",
      "# determin from which array in a given list of arrays an element is picked\n",
      "np.choose([0, 0, 0, 1, 1, 1, 2, 2, 2],\n",
      "          [x**2, x**3, x**4])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 5,
       "text": [
        "array([  16.,    9.,    4.,   -1.,    0.,    1.,   16.,   81.,  256.])"
       ]
      }
     ],
     "prompt_number": 5
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# np.nonzero() returns indices \n",
      "np.nonzero(abs(x) > 2)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 6,
       "text": [
        "(array([0, 1, 7, 8]),)"
       ]
      }
     ],
     "prompt_number": 6
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# set operation\n",
      "a = np.unique([1, 2, 3, 3])\n",
      "b = np.unique([2, 3, 4, 4, 5, 6, 5])\n",
      "print a\n",
      "print b\n",
      "np.in1d(a, b)  # whether items in a is also in b"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "[1 2 3]\n",
        "[2 3 4 5 6]\n"
       ]
      },
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 8,
       "text": [
        "array([False,  True,  True], dtype=bool)"
       ]
      }
     ],
     "prompt_number": 8
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print 1 in a"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "True\n"
       ]
      }
     ],
     "prompt_number": 9
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "np.union1d(a, b)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 10,
       "text": [
        "array([1, 2, 3, 4, 5, 6])"
       ]
      }
     ],
     "prompt_number": 10
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "np.intersect1d(a, b)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 11,
       "text": [
        "array([2, 3])"
       ]
      }
     ],
     "prompt_number": 11
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "np.setdiff1d(a, b)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 12,
       "text": [
        "array([1])"
       ]
      }
     ],
     "prompt_number": 12
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "np.setdiff1d(b, a)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 13,
       "text": [
        "array([4, 5, 6])"
       ]
      }
     ],
     "prompt_number": 13
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# operations on arrays\n",
      "a = np.arange(9).reshape(3, 3)\n",
      "print a\n",
      "print a.T  # transpose"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "[[0 1 2]\n",
        " [3 4 5]\n",
        " [6 7 8]]\n",
        "[[0 3 6]\n",
        " [1 4 7]\n",
        " [2 5 8]]\n"
       ]
      }
     ],
     "prompt_number": 15
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Ch3. Symbolic Computing\n",
      "\n",
      "In the scientific Python envrionment, the main library for symbolic computing is [SymPy](http://www.sympy.org/en/index.html).\n",
      "\n",
      "For numbers, Sympy provides `sympy.Integer` and `sympy.Float` data type to represent symbolic numbers.\n",
      "\n",
      "Some mathematical constants and special symbols:\n",
      "* sympy.pi : PI\n",
      "* sympy.E: the base of natural logarithm\n",
      "* sympy.EulerGama: Euler's contant\n",
      "* sympy.I: the imaginary unit\n",
      "* sympy.oo: Infinity\n",
      "\n",
      "In SymPy, mathematical expressions are represented as trees where leafs are symbols, and nodes are class instances that represent mathematical operations.\n",
      "\n",
      "Functions for simplifying expressions:\n",
      "* sympy.simplify: attempt various methods and approaches to obtain a simpler form of a given expression.\n",
      "* sympy.trigsimp: attempt to simplify an expression using trigonometric identities.\n",
      "* sympy.powsimp: attempt to simplify an expression using law of powers.\n",
      "* sympy.compsimp: simplify combinatorial expressions.\n",
      "* sympy.ratsimp: simplify an expression by writing on a common denominator.\n",
      "\n",
      "Functions and methods for operating on SymPy matrices:\n",
      "* transpose/T: compute transpose\n",
      "* adjoint/H: compute adjoint\n",
      "* trace: compute the trace\n",
      "* det: compute the determinant\n",
      "* inv: compute the inverse \n",
      "* LUdecomposition: compute the LU decomposition\n",
      "* LUsolve: solve a linear system Ax=b using LU factorization\n",
      "* QRdecomposition: compute the QR decomposition\n",
      "* QRsolve: similar as LUsolve, but using QR factorization\n",
      "* diagonalize: diagonalize a matrix, such that A=inv(D)MD, where D is diagonal matrix\n",
      "* norm: compute the norm of a matrix\n",
      "* nullspace: compute a set of vectors that spans the null space of a matrix\n",
      "* rank: compute the rank\n",
      "* singlar_values: compute the singular values of a matrix\n",
      "* solve: solve a linear system of equations like Mx=b\n",
      "\n",
      "More tutorials can be found at [SymPy Tutorials](http://docs.sympy.org/dev/tutorial/)."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import sympy \n",
      "sympy.init_printing()\n",
      "\n",
      "x = sympy.Symbol(\"x\")\n",
      "y = sympy.Symbol(\"y\", positive=True)\n",
      "sympy.sqrt(x ** 2)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\sqrt{x^{2}}$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAACsAAAAhCAYAAABAxlKmAAAABHNCSVQICAgIfAhkiAAAAjFJREFU\nWIXt10+IjVEYx/HPzCD/xiUpRjKNTIQppkzNhJK/w3o2rKQsWBBZsLCQlCh/Yq0srZRmIUPs/MmG\nJDsLJEUk/zMW515z587cce77nhmp+a7e5z3nec6v857nec7LOKNDXQ7f/mQqxoCzY71gfUa/5XiS\nUshochhNY71o1p2dj1cphcSQRewsvEstJIYsYjfjRmohMWQR24F7qYXEUKvY0vxfqYXUsngs/2xX\nYUKN8zfhfIJ1O9CJArpwHHcTxB3EuQQxpuNkmd2Dz0I5TEaT0Azy0iac+UVFe4Zwz+jJEmxylfe7\nhTablzrhGJQuUcsEsStrDdSOi1XGRuvicgVnYiaWV4PZ2I/tw8ybhO/5dQ1hF17jUK2OS4Ts/IHW\nirGN2JZb2mC6BbGEo9f8N4fynX2GD7iPDRXz1uNWfn1/WIt56MVcbCnaIzJcnb0piL1U9m4qvkSI\naMdOIWGahaTcg5lCaTpWHLuOxgrfQkT8IazBewO73oq9EX6LccFAll/Gc6H4dwnl6mAWQSMxEZ+w\numgfEHGehC8xrcy+aqA1L8BpIYmT04sjxefY9rqwwn6JE8kUqX6RKZ3bRnyMjPWi7Hmp0PFuZ5cW\nTxu+YgfWZfDfh29CYpZoSaBrWOrwBg/F3cym4BRWFO1reFA2Xm9wdclENSH96EMDfkbE6Ra60COh\nqbQINbvEUaGt5qJhhLECnuJxRJy3mCPU01VCre3EVuGfrQ93cikdZ5z/kN/xj1BSyzrMlgAAAABJ\nRU5ErkJggg==\n",
       "prompt_number": 17,
       "text": [
        "   ____\n",
        "  \u2571  2 \n",
        "\u2572\u2571  x  "
       ]
      }
     ],
     "prompt_number": 17
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sympy.sqrt(y ** 2)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$y$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAAAwAAAARCAYAAADpPU2iAAAABHNCSVQICAgIfAhkiAAAAN1JREFU\nKJHN0S1LA1AUxvHfBmqwiBh8CYIwEFwyaBGrloWBQfYlhuxbWBUswqLuAyyLWoxq0yCsDVyxqeBL\n8A7O7hwLFp907znnf8/zcPmDVnCMNmpZr4HzHDjBJOq4z3p3aEExFbZwjXfs4jEMz6CMy/jCPKaw\nhA9UQ6+CL6z9luMALwnu6xDPKERLfe3gAm+hto2rtGUIWMZDuE9jPfrPgQ5mMzsTEShkwCpOcYtX\nbPoJO4dPY1REF81RA2cGP6yatpRGAT0cpfMinrCfD8UMe9hIVhYSfDPO9z/QN0NiJa/80+byAAAA\nAElFTkSuQmCC\n",
       "prompt_number": 18,
       "text": [
        "y"
       ]
      }
     ],
     "prompt_number": 18
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "y.is_real"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 20,
       "text": [
        "True"
       ]
      }
     ],
     "prompt_number": 20
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from sympy import pi\n",
      "n1 = sympy.Symbol(\"n\")\n",
      "n2 = sympy.Symbol(\"n\", integer=True)\n",
      "n3 = sympy.Symbol(\"n\", odd=True)\n",
      "sympy.cos(n1 * pi)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\cos{\\left (\\pi n \\right )}$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAADoAAAANCAYAAAD4xH09AAAABHNCSVQICAgIfAhkiAAAArlJREFU\nSInt1d2L1lUQB/DPpmap2ZoprJBWRFoXbWqQhmYrLakgIRUVivYeFNHbjd6oCHaVZEFBECJGZCZK\nlCEI6oVZZFRUN10IpuFiFPlCZrW2Xcw87fH0e/6A0Lk5M/M958zMmZfDeUIdlXwzVuI4zuAivIUv\nEr8Vz+AYhqITL+H74o5FmIlfMRxXpp2nEx+CXuxM+TK8mecuaePnAObgCtyJbixL+b7cMyt9+Tjl\nyejHwfqy23ASdxS6Tfgh+YUZ0LgCvwGHMLWQd1f3PoCNhfwgRiXfgW1YhbtEwI9lMB9hQfKzcDHW\n57kD2IcXDSZrOQ5Xth+ug+zIIHZU+lewJR37Gc/VB/Eqvk7+fnwnstSikVhXyC8U/FLML+T3Rcbh\nw8pOL+5NX3/B1gpfgd8q3WyDSQAzRHmsaQikFcAA5jVgTyU2HRPwE07gbVHmZQWMxPNtbHRie/Ij\n8FmFd+FSUbYDIsslbcb+SjcGjxI9CFfn+mMbJ67Ntb8B+yvX63BU9PFm0QKv4Ygo11Ywp9rYWIxP\nk5+CsxXeh9/Rg9P4vMCGiSTUVXAK4xkM9GiuY9o40Zfr+AZsbK7HcBP+wJO4ChPxnui94WJAjWq4\nAx7HnuS7xBBroh58gj8L3XyMxrui9Cel/nJR5v8Gul9kc27DxYuwS7zi5AZ8ep7dh2li+LToCB7B\n3yKbpwubJd2ezn2Z8mjxSPUUHpJ791T6pak7JIbXtNR3+28L6BVfyt2FbhzeSH5xBtRV4NeIIdWT\n8kOiOsq+nOTcMlvSEMAHYui1aI7owwXVvltSP7PSf4NnxZe3QZQy2Z8SaNEu8VqrxfDpE2W4IvF3\nxPheJ/7Zs2Jo9ODb3NOP18WoP5NOdeKews4WUTk7C103nijkr0Q11P/8hLR1oNKvFf/qjXhZzI3r\nsdcFukD/b/oHOOyN1XuXopMAAAAASUVORK5CYII=\n",
       "prompt_number": 22,
       "text": [
        "cos(\u03c0\u22c5n)"
       ]
      }
     ],
     "prompt_number": 22
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "i = sympy.Integer(19)\n",
      "type(i)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 23,
       "text": [
        "sympy.core.numbers.Integer"
       ]
      }
     ],
     "prompt_number": 23
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# sympy.sympify function takes a wide range of inputs and derives a\n",
      "# Sympy compatible expression.\n",
      "i, f = sympy.sympify(19), sympy.sympify(2.3)\n",
      "type(i), type(f)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 24,
       "text": [
        "(sympy.core.numbers.Integer, sympy.core.numbers.Float)"
       ]
      }
     ],
     "prompt_number": 24
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# represent a float number with certain digits\n",
      "sympy.Float(0.3, 25)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$0.2999999999999999888977698$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAAQwAAAASCAYAAACuJ+DMAAAABHNCSVQICAgIfAhkiAAABQFJREFU\neJzt21mIHEUcx/HP6sYYo1E3MYdE0GgUL3QVFBIJgoKIPoiIIsQDffDWeAQPPNawMeqDRPBCQQRF\ngxIVL1TwiA8meKHEA8Uz3oknHkkUsz78e3Z6e3sy3eMOvtQPBqb/9a2efxVd1fX/Vw1JSUlJFdVT\nuN4LS/AFhjAFC/F9hXsdgiswATPxGq7F1wVuFq7DBvyDibgc3yUucf+Bm4krxXM7HtvgRqzuMlfF\nv6NxF97BemzEplz5a7ijBtfQnhjIseuz699q+lenvcPaHl9hfs52Fd7FVq0qZToIz2OH7HpbvIK1\n2DXH7YYfcHzONl90UG/iEtchNxmPY0ah7oeY3UWuqn+XioFY9tmEo2pysA/WYE52PR2fiQmjrn9V\n2ztCi8UAz9+oD3/jnFaVMj2NPQq2ftHQZTnb4/gJW+RsE8Tsd3riEtchtxAXGK2rcFMXuar+3Yld\nMK7AzsWtHXC9YjAvyNl2wTpc1IF/Vds7Qh/hyRL7arzYqlKm38VsN7Vg/1nMcMQq5W+xrCrqQzyV\nuMR1wBED7bES7hLc0iWujn+3lTDb4hkxgOtyZ+AvzRV9mbrRf8Mzz3Zi6bGmpNI3OHgzjhFLoWki\nPspro2ZD+8TMuKGk/q8iB5K4xNXl4G0chwexY2YbL5bf93WJq+Pf+SXMzSLHt74D7mR8jF9K+Ia6\n0X/D2k+ED0tKyh7VTIS00kQRQ+W1c1bvpex6S/yhfMb7KmN7E5e4mhzxbL6e2b4VD/oDIomY11hy\ndfwraq5IbrZTGdcjJo8VmIdBLBXhR3+H/lXtl2HNyeDrS8ruz8qmtWxWuW4QWdk5Odu9IkTJ785M\nFwmdIc2QJnGJq8MRq+RnNZOETyl/ZseSq+NfXm8auRnQSmXclOzeH+DsnP1wsTuyb4f+Ve0XcGgG\nDZSULcvKdm5VuUSzMucHC/adRK7krOy6N2Peyn5jcuIS1wFHbOnfg2Pwqebbcn8jNZZcHf8aOgLv\nl9irctOye28wMq9BrBzyuYkx77/GzDMLn4gVxkDBiSdxLCYZub/bSuPFculVkTQpakdcKLZx/8yc\nXC5mxm0yRxOXuDrcxThSPOxEiDwodgxW44DMPtZcnXY0tFzkEM6webXixomE53silZDXKhGWTBL5\nw6r+1WnvMLDJyK2bhl4Uux1VdT8W1eDhS7yQuMR1wPWI57M4eIgl+xD27gJX1b+8xokdxcVt6rfj\n1opzTkWtyPybUVLWyr+O2/umSHAWtUYzcdlOA7imYDu1TZ2dMqfOTlziOuCmap2U7xFv6f4ucJ20\nY67mG31zasc9IXIYRa0SoUqrZGuZfx23d5E4xp1PkOye3ey8Ajvb6PhpvvKVxd257wvE7DgzZ7tM\nxF5bJy5xHXA94pjzYUZru4wd3wWuTjsaOk2Mp3YHIdtxJ4vwIj8Ge8Q268M521j23yjNyH7wlJxt\nqYiV8kfD54nw5bmCbZ3Yisl/luGhHHc1Ptfcgu0X/1PJ76QkLnF1uZPEc7przjYJj+CELnJV/Wto\noZgIzmxRXpXbAivF4G/oRDEG8z6Pdf+N+vPZgSJu+kjMLn0i8fFljtlLxE/LcW5m+zFjyzSoGaZM\nEKuQKdn9txeHUlYW6iQucXU44qV1iUj2DYlzCLfj5S5ydfwjDkfdJxKMb7RgqnJ94hTmRHGis0dM\nEJ906F/VfklKSkpKSkpKSkpKSvq/9C+tOhicvECjTgAAAABJRU5ErkJggg==\n",
       "prompt_number": 25,
       "text": [
        "0.2999999999999999888977698"
       ]
      }
     ],
     "prompt_number": 25
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Rational\n",
      "sympy.Rational(11, 13)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\frac{11}{13}$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAABAAAAAeCAYAAAAl+Z4RAAAABHNCSVQICAgIfAhkiAAAAORJREFU\nOI3t1KFLQ1EYBfDfnM2ta5FpWlgcKojFYDa4ZLAsyOLWx/6A/R1a/ENEMRjspsHA4IIYVGbwCo+3\n+d59TDDMU+537vk49/DB/fhlVHGFzYIaaGOAKWoFtBlkNc1oK3luefg3oJyoT9FBExtYx02EtvQo\nhXP6pykWQjnFq7jANSaJ+wPsYxddPOMxbZb1559wFuoWXlD5KdU8gwbWEgZvIW20QRKX6H+T1YzG\nNHZwhFcMsxrzEpzjToEZ7GGMrcDroeeEuH3wjgeMAt/2NcR74vbBCB84DGmO0cNtxONLgU+jFy6r\nKLda1QAAAABJRU5ErkJggg==\n",
       "prompt_number": 26,
       "text": [
        "11\n",
        "\u2500\u2500\n",
        "13"
       ]
      }
     ],
     "prompt_number": 26
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "r1 = sympy.Rational(2, 3)\n",
      "r2 = sympy.Rational(4, 5)\n",
      "r1 * r2"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\frac{8}{15}$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAABAAAAAeCAYAAAAl+Z4RAAAABHNCSVQICAgIfAhkiAAAAT5JREFU\nOI3l1L8rRlEcx/GXH0X0WBGJxUIYEMmibGIwKEYsZn8Asz+ChYksRoNSRMpEKcmgsEkpQo/hXrmu\n5x6eDAaf5Z5zz/t8vt/zPfd++aVKAmstGMETarGF42LMl1KB1gpBpQGDMbTH4zweCkFlAYNSbCCH\nHqziNsB/Ua0o7QtcY6iYzTlsogqVWMQdmtNg1hFG4g27eMFObFqOkySYVcRzdBUIdpAGQ9/BBHpx\nhQocYTvA/1u9FzH/p1n8RL1oEGVch74sMId1NKXer4iO+Yp9tL4vlCegGTRiHPMpg0vUx+Ob79LN\n+/rTLGTBoYaSVDWmMYlltBWbQb+PKx/GWSh4IYNkrZpjplPIJaE+UW+ojOe5+Pn8U4MrUYd+jOcD\n2MMpnzvSFObQLbqyOhziHjUYxSA6MCujS/9HvQHNqjSYsrxfQwAAAABJRU5ErkJggg==\n",
       "prompt_number": 27,
       "text": [
        "8/15"
       ]
      }
     ],
     "prompt_number": 27
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# symbolic functions\n",
      "x, y, z = sympy.symbols(\"x, y, z\")\n",
      "f = sympy.Function(\"f\")\n",
      "type(f)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 28,
       "text": [
        "sympy.core.function.UndefinedFunction"
       ]
      }
     ],
     "prompt_number": 28
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "f(x)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$f{\\left (x \\right )}$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAAB4AAAAWCAYAAADXYyzPAAAABHNCSVQICAgIfAhkiAAAAcBJREFU\nSInt1TtoVUEQBuDPV1AimigqKMZHVBSJ8QEpIhYil6BgIzaCjQ8QxEYjWFgIgTRBCxGsfRQWYikI\nImIjio2RBIMkSAoLFQkSCChiLHaPbg4c7yk8N41/NTP7n/l3zszuMkuYU4KzCdcxjCU4i59Vbgqa\nMIaTuIMfaK1aFA5jGu3oQq0RonANn6tIPLfOehdeVSFcNFy3sQo9GME43uOc8LsfJdw9OC60ZD1O\n4wxasAZXMF+Yj7Eym9oYkx1JYsewOPE340ZSwC28Qzf2CtPfG9dOlBEVBafjBjJcyHFuojnx7+Nl\ntNfiKpZHfx92lRHuw1d/qmnG+RxnXc7/gP6CfK04lTl/G66deC1UTejZZI4zntjbsBpPC/JNYmUZ\n4c4onGHCzP7mcQDf8TyJpW1aii/1hJehDYNJbCrHX4QBdES/hjeRl+W+mPA78aKecDYEg7n4JyyM\n9qGYeDu2CtV9S7iXcTfxN8SNgXkFwkeFy6PXzAdhBPsxKtxoK4Te7xbOcjcOCuf/CZ7F77YI98BE\ngd5v3MODeqR/hUt4HO1R4bJoCIbwEDvwFguqFEt7PCX0qyY89h+rFP6PhuEXgc1N8OWQNS8AAAAA\nSUVORK5CYII=\n",
       "prompt_number": 29,
       "text": [
        "f(x)"
       ]
      }
     ],
     "prompt_number": 29
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "g = sympy.Function(\"g\")(x, y, z)\n",
      "g"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$g{\\left (x,y,z \\right )}$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAAD8AAAASCAYAAADsbQY3AAAABHNCSVQICAgIfAhkiAAAAzZJREFU\nWIXt11mI11UUB/DP2JTOTKtiZCHShGlIQQ3BUJoMEZVkGklUVBBKWC8FRWU+NEU1JtJO00YFbYZT\nD4FJT2lFIfTSShuCRLZpDRSibfZw7i/v/zr/bXroofnCML9zzj33nnPuWe6fCbSNYzHlvzaiDRyN\nq0vmpDEWHoJBvIAHsBKv4KokPwLLsCfT6cP9uA+vYipW4V48jxOaGNeLR7ARlxeyG7G+iX6FFfgR\nH+HkxBvCdIxifiPlLmzGyxlvFf4QQYA7cGgmn42H0ZHoZ/EFzsCZ+Cs50AjDIujX48NC9kFhTz0s\nwFu4HWvwIt7BbUnegScbbfAQfsDhGe887MMcEcE1hc6j6MnoDdiavmdiHaY1OHO+/be9CSOZ7Ej8\niesaGZ1wIjoz+hIRgDy7h9TJwpn4XaR6jruwI31fgcWFfFZBf4O7WzC2wjGYjOOEoxdlssUi8PPa\n2A+Wi7LtLPhLkgy1Ubk4Ld5UKCwUpUCkcpmW27Pvk0QzfLMNQ7/DXnFTv+L1TLYAO/FpG/vdjNNx\npSjXHDswtyJy5yvm1ow3JW20OdEzkjH1cDZ+w7sZr7dFo88VQdub8c4SdbyvxT3uFA15peg1cFQm\nHxWlhFrnR/FL+l9hoUjJ6iZ7CuO6sNb+znqOyIzd2f43FQbOMfaYnIXPM7oHp2FLi/qDoqmtznhz\nC7pL+PiPcRVG0C1mYmXMsKjhLxNvl4hshUXCuXnpoF61wVmN5zJ6AJ+JeiyxXYzICmtxsFrn6+kv\nRb8oocdEhx8Wo/PBbN1UfFsReUN4H9fiaVFju/FTOqzCV6KmdyV6ixhtfemvX3T/x0X6v4b3Mv3v\nRdn0jeH8DXhKzPs9OAU/i5ndSP8wUW7ni/K4NTn/ibicr7O1p4rx1xTdyYEVGW8A17Si3ASDTeST\nxC0+M079enhCduFV2k/HhcXCRTgIb2S8t8WN/FtMLuiX1E6RJaIx3dOifis4Hh87cAJYL265O9Ez\nsE287kpcKhrReDEgnsc5dopXIlFW29I5reo3QwduEa/IA3CZmK9D4kU2ggsabLbc+H7YdKYzSiwT\nDW6daGb9beo3wzTZiJvABP7H+BvS4qVJiaF76AAAAABJRU5ErkJggg==\n",
       "prompt_number": 30,
       "text": [
        "g(x, y, z)"
       ]
      }
     ],
     "prompt_number": 30
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "g.free_symbols"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\left\\{x, y, z\\right\\}$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAADgAAAATCAYAAADF7c7rAAAABHNCSVQICAgIfAhkiAAAAp1JREFU\nWIXt102I1VUYx/HPDAOTb1GuRAljpCwsW7hRGEGzRAVztNCYhUi6MyQVxQmEoUgrdNyM2WBQkKIb\nRQcicRGKkQPSxkGCJJFkoCFBzI2ZvSyec4d/xzv3/meyadF84cI8z3l+Z55znnOecy//Q15BJx79\nj/MYKevwDh6pFTQL58Yim3+JN0RxhmjMAp7A9SrCeTiALpzEVHTgAxwRG1OLFnTjC7RnY9txvF7m\niU34Gf14Pvn2Yk76+xqeLAryBVbjKWzAtvT5BX04j96UcFudOXYk7VnsysbWo6FEHgtTbGWjOvA1\n7uDKcKKmEhNvTQn+mexJuIVvRMW78FkNfSsu4B6W4fvC2GN4Dj0l8hjEi7if7LViY98voR1iCQ5n\nvpmZPYD3RjDnNDRjBn7H6sLYSrFxc6roarERRz1YoFZ8PpyoER9hRY2Jn00JvTTChIiTcFsstsKH\n4k6VOaIVduJj1a/XZHwlNvMB9oknohZv4ldMLPhaSiZ2BqcyXx9OlNQTz0B+eh7P7Bn4ElNycYO4\nSysLvglilysd6zQuFcYrVS8yW/W36DvRdStMEvdyS0l9J97NfM+IwhTnvGCYCsJSfFKwX8UfeD1N\n1i86V4XdWFCwF4sjXK0qZ/z9fh9MsS+U0Lcl/WZxPN/GIfwgGl2FVnE3h8gv6b3Md15UdV76zBcV\n60mxvbhYiB/EzRSb85bYvG7cxVzRjfvr6KeI5rdcLH5XWuAV0S9uZOv5rcr/HmKR2i2/LJ11xhvx\nEz4dpX44FsnyL/PQj4bmzD6GywV7lXgD95TUj5p8gQN4+h/OuRjfZr6XxXGH6dgvvh1dLakvyyz8\nWC9ojWjFo/k10SS+G+a8JrrxPtEE5o9QX4Z28Yw8tOqPM84Y8BcUFX/68ifSBAAAAABJRU5ErkJg\ngg==\n",
       "prompt_number": 31,
       "text": [
        "set([x, y, z])"
       ]
      }
     ],
     "prompt_number": 31
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sympy.sin(x)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\sin{\\left (x \\right )}$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAACwAAAASCAYAAAAg9DzcAAAABHNCSVQICAgIfAhkiAAAAi5JREFU\nSInt1kuIj1EYBvAfY9xlXMudyW0SMkjGxmXGQllYKGoWbmVlIbNQCtmZUEaRDSMbtqQUsSAkadKs\nRGGkKM1ihoz74pxv5vw/08y/xiQ1T3195z3nPd95znve5z0f/xlKivRbi6f4hof9xqYIDC7SbwrG\nYUE/cvnrmIsh/5rEf4dBRfgMw2xMQjua+pNQb0gJb8FqtAokJ8bxcziJjbiEHYn/MSG/T+MR1mEU\nVuKAQoGWoAY3o70ctfglBGQP9qIM03AELwXdfI/tTlTgTm4z29CY2E9yNkxAG25gd9LfgFc53+0Y\nHdvzcEZXwBrxHFVYg59xwxl2Zo2sSizBZIxJnK7jY2K3+xMf41OOC0l/M2YJaZRhSvKN/TgoRJdw\nKq14gDc4pTA4L7AsJXwvEn6Ly9iHkbld9oSmZHH4mhDJ3un4cXxK7Crcju0W1CkMVjMqU8LvsApX\nhEuiIU7cXiThjl7Gy4TUyfA6aVdgKu72ML9NCGhBSnQIST8DM3EV5wUB9hWtuvI3jw3CiTxI+spz\nPmPFiGeEKwWRZWjBLiH5y/pIFj4na41APRZHuwbPok/GqS43f6lQhQqu5jqFIpkuKPd9tEt1f9N1\n11+ae8MHDMemuNYiLBSimabUIUFHKebETXWWlVpB1ePxRRBImSCOcpzACuHn5z42oxqHhdP5hsfY\nKtTkauHf4xUuCvV6KNYL5bFel6iO4mxc9yuu4VZCdj5+yNXhAQwg4jfDm3ACblK/jQAAAABJRU5E\nrkJggg==\n",
       "prompt_number": 32,
       "text": [
        "sin(x)"
       ]
      }
     ],
     "prompt_number": 32
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sympy.sin(pi * 1.5)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$-1$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAABsAAAASCAYAAACq26WdAAAABHNCSVQICAgIfAhkiAAAAIZJREFU\nOI3t1LENwkAMQNEHSoEyADtQRRRMQ8U+DMEaqTIARRTEFsyAQnEpUhApQXeRAvzGxcn+Z9kyCyfH\nbQ7RAVe07x6zSJIdznjgGanmKC4GOlvP+Yu/LAr9bSyE4a5G5tY4fSprsJ+SPJXvnVkK2aaLeYLa\nYIsSd+F6tMLpqnBMJf1RXtvTD+xjlzAcAAAAAElFTkSuQmCC\n",
       "prompt_number": 33,
       "text": [
        "-1"
       ]
      }
     ],
     "prompt_number": 33
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# lambda function\n",
      "h = sympy.Lambda(x, x**2)\n",
      "h"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\Lambda {\\left (x, x^{2} \\right )}$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAAEYAAAAcCAYAAADcO8kVAAAABHNCSVQICAgIfAhkiAAAA0NJREFU\nWIXt11+IVVUUx/HPnfHBSR36C5ZNTTZqGQUiNDSRMJURUVApY1AP/SOJfImCniKJQsqC/pAwL1H2\nVvnQS0FlPSRZhBhFQlGWRf8oSISkpGZ6WOfi7XDP3ed6zz0GzRcu9+691/6tdffZe+11mKM2hnDb\n8Q6iBGdhGwbqcDaIl7G8DmcVcDceq8PRw9hUh6ME47gXm/EW1nSwfRuT/QxmDF+IXXM8WYgtLe0p\nHMaSAvtr8TEa/QroeTzQL/EuuAgzODdrD2NWLFA7BvA1ruhHMMPiqYz2Q7xLGuIoNXfABWJhVnWY\nsxXbu3HyjDirKaZwoBvhGnkJTyZspvCrkjfUIH7GByVsp/FaGdGauR2PS+ePUbGrVpYRncyMZzCS\nsN0jbqT/EteIhYH50sf8d9zcbHTaOutETdLAjQnRZfg2YVMna3A6XsdiXJ21O3FQiRzZwBsiYc3i\nvQ62izKbDclw62EpDomYWj/DiXmf4elmY16B0aXYjb3Yjwmx4j+2sV2UfR/q4HQ1bskCHMWd2IgT\nRX3xEL5KBF5WY7/0IrTjIBakjJ4S1xyRvGZxT4HtSDZ+ZcH4MjzraAJ8QRSCE+IBzOC+RDxVaKR4\nX1wihTREGd3kYvHH3ymwPyUbX18wvs2/n8Qr+DD7PYInMo1OVKGRYm+mU8g4Hs31HcBfOK2N/QCO\n4I4CvbNz7e/b6KeoQiPFd1pqtna30nrsyPXtEHXNDW3sZ8SNdFKBw9bC73ycgXdLBlulRicGRQ79\nspPRzjZ9E+K4vFkw51XxrpRiE/7ECS19S0vMq1ojz3Lx/xY3O/I7ZrU4a3l24wdR9J3cZnyXyEV5\nhkTyvjBrr8Un4r2q6f/+3JwVoiDrRaNbxrEPPxUZbMddBWPTYlXbjY/hb0ev7ibrxFG7CefhU7GI\nTR7EJS3tZrXdepS71TgWXlSQsy7H51lQR0TWbzImzvPhbPyPrL0ip7ELt+b6ThVHbGv2WZAFMS2u\n37U5+5X4Bd/0oNEt8/EbzulRp5Dr8VFFWpsr0inDRrHQfWUnLqtAZ0vapBKGRE5NvUf1zBJRQS7s\nQWNScbFYNc/hqpp8WYVHjnHuPPXtljNxXU2+5pjj/8o/q7StxZUm03UAAAAASUVORK5CYII=\n",
       "prompt_number": 34,
       "text": [
        "     2\n",
        "x \u21a6 x "
       ]
      }
     ],
     "prompt_number": 34
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "h(5)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$25$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAABUAAAASCAYAAAC0EpUuAAAABHNCSVQICAgIfAhkiAAAAVNJREFU\nOI3t071L1WEUB/DP1UuaL5AgFqYg6uYQColJCoH/RBBOzs46CKIiLjk4Cg2VQxCJi4ROclsaBScD\nkRsNKYXDjdDBl+H3Ux4ff1ednPzCgXO+55XnOYc7QC+W8RVbeIenGXFzeIEG1KAL42iJA3uwjkep\nXYcC9tEWxZ5GcoyJrClX0Rlx3WnSp4gvYhEreItnWQXhH36iKeIP8CfiNsoVgYpA38Vj1EYxR3h4\nXZEY+UDvQz1+B1xz2iie7IHkYxpxgg6M4cdtms5KPqE/4nfQGthvsIcnNxVsRwkzGb7KDPs/Fq4r\nWIXvmL+pc4BiKmXxEVNlfAV8y+B/4bBcwUlXF3k40EvYzMg7xDaXV4rkwSswHfEvA30NQ5G/W/Jk\nS5ALHIP4kiaFyEuu6nVqP8coRiQ7nMN7yTW+SrkL/HX1ps8lnnwAn/FBcqrTqHYPOANoLUZQsXwd\nzQAAAABJRU5ErkJggg==\n",
       "prompt_number": 35,
       "text": [
        "25"
       ]
      }
     ],
     "prompt_number": 35
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "h(1+x)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\left(x + 1\\right)^{2}$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAAD8AAAAZCAYAAACGqvb0AAAABHNCSVQICAgIfAhkiAAAAm1JREFU\nWIXt112ITVEUwPHf+BqMkISIppEY8h1CSTTR5EEpDygyyjPxhChJiBd5kNIVL94m5cGDRJmUlM8n\n0cjbEFGIfD3sc5vtdu+5517uHTH/2nX2Xnuts9bZa6+zN/8xDX3tQI1ZgmUYheU4jFt96lGdGIGj\nUX8jPmJS37hTX+bgO6Ym/ZH4IXyEf54GIe3zW3uWEPz8coqrMLR2flXFcDwsMt6IIxhcRv8iTpZ7\nyUpsqNSzCijnZDEW4a6wcsWYieMp+tsTeWqBb8KlKpyrhHOyF51WXEUOd5QOHs4IaV5IuxA8IZub\nSxk4gHUZHauWXJoDZfTSgp+OzoKxFejAhKStx9JSBh5hYBWOVUJObYKH50JVhxa8T3TilpcbFCm2\nogffCgwuxJZEsRk7sBOjhfQ9iGcVBlIr7gv14bpfP0RRBkTP8/C0QD4N27A7ae+FvXcTV7BJSKW/\nhR4h/TMRr/x4vCuQ78JevenWhLfowmScEtLxb+GNkJGZiIMfiq8F8mP4EPWX6Q32Jfak2L6AuUXG\np2AxvhSRdeBeis1yNAqrn4k4+NeJYzEvoudWTMSNjLa3lhjP4RC6M9qphDEq+Hjxnu8WUr8Uq4XV\n6orGWirxrA4040HWyXHwt4XLQJ5hwqlodtJvE46XHyPdtLSvN0OEzHySVSEO/lOimK+W7UJwszBD\nWOXP0fx9wnm5XuTvGsNLyNfg8u+8YC5OJ89jcR4nktYkFLGzyZy2Kt+Rk/2QMw7X8FjvIeWVUHc2\nF8ztVOa/noUjwkWhVuRUd8JLYzvW/glDDdivdlfaBaq72ZViiJDy/fTTTz+p/AQfzGjs+GyJxwAA\nAABJRU5ErkJggg==\n",
       "prompt_number": 36,
       "text": [
        "       2\n",
        "(x + 1) "
       ]
      }
     ],
     "prompt_number": 36
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Expressions\n",
      "x = sympy.Symbol(\"x\")\n",
      "expr = 1 + 2 * x**2 + 3 * x**3\n",
      "expr"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$3 x^{3} + 2 x^{2} + 1$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAAHMAAAAYCAYAAADJcMJ/AAAABHNCSVQICAgIfAhkiAAAA9BJREFU\naIHt2VtoXFUUgOGvNVUbY1sUWrVV41SlwWtSrCHWWvCCVB98ML5YVFRQoSKoD2pBxXoBFQoKBVFk\ntEoFBaGoYB/UCtZbbfGGUpHiQ0WLeMVb1ejD2oecTCZp5kwmk4n54TBnr71nn7Vm77P2WmuYZsow\no8Hzn41FaMdKPInXG/zMRnIm+jAXZ2Ed3myqRhPId7gy3ffjV3Q0T5266MADufZl+A0Lm6POxHMy\nDkn3/fgLhzZPnbo4FQNYnNpz8K9Y1P8dm3Bns5WogxnCzWZH00liMbubplEFlWdmL67D75idrvvw\ncR3PWIYLUMIa4ZomimW4TdixCO+JDbVnHObeiL24ZRzmqpV2vCO8RVW6sRkH52Qb8DNOHwcFrscH\n6jszZ9UwtgdbMC+1O0SwsheddegAV+NB9QeQtdiTcQbeF15hRNanAf052cVJ9kiBh/biWxyX2kvS\nXJcWmCvjcWMPOF7G8RWy7qTDc3XosEosJrHxO+uYqxZ7uoRNZfFWDlvMmbn7neIt/Ckny4KVIq7x\nb3yKr1O7JAKgDwvMlTHL2HfzOXgN83OynfgR5xV8/gociVdwBC5M7aLUYs9nuAhX4fNqA9py90+n\nK08P/hHBS61sF3nlGhEFLhdv+hcF5irCbpxoMJrO+FOxiLqEl6p8d26BuRpC2yh9i8UuuNHwt2kp\nVotXvRPXisBpnnAbd+FLPJP7zvrxULgGesUP/01OdhQW4I2KsWO1Z04jFW4El+BR7MLthh/yJ6T+\nTF5OY/tEVWRA4yK8svrOqPuFp+nLyVrRnrL9BECVHChKb2/h8Jx8g6Gu63m8m+6PxsMV48eTsuKL\nWcIvuLdC3or2lFVZzP2F1ivFgr5gMMo9Fl/lxuxJk68toNRIPIXTqsiPEW5zX5W+a0TqU42DsBXb\ncHNFXyvaUxZl0hHXb4nhSWhWshpQPT/sSv1Fo8NaKSu2kzfinjGMaxV7ykZJTeaIsH2Hwdojcb4Q\nO+CAKpOeK3bVtpysVEC5RnK3OAPzpcQrRhjbCvaMSLaY+0Rkuxs/5Pq70ud2kX/OFpWPU5L8fHxk\nMA+diVsbqG+trBY6rauQL0+frWbPqGSpyR94SJS68ot5k/jb6obUXiWM2yEKACVDiwxrhUubDKwQ\n6dCrhqZIbQZdVCvZkycrubbLFXTyeeYdIq/cJKo3C/C9KBzsSmO2Cn+9NF29Ihp8TLzdm/F2Y/Sv\nmRdxGC6v0pdFtK1kz3yxsRaKf2yIwO0TPIFnm6RXYcrqL5JPJsqmlj010aPYPw2TlalmzzTTTDPN\nVOY/vg/RfDMkP3UAAAAASUVORK5CYII=\n",
       "prompt_number": 37,
       "text": [
        "   3      2    \n",
        "3\u22c5x  + 2\u22c5x  + 1"
       ]
      }
     ],
     "prompt_number": 37
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "expr.args"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\begin{pmatrix}1, & 2 x^{2}, & 3 x^{3}\\end{pmatrix}$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 39,
       "text": [
        "\u239b      2     3\u239e\n",
        "\u239d1, 2\u22c5x , 3\u22c5x \u23a0"
       ]
      }
     ],
     "prompt_number": 39
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# simplify an expression\n",
      "expr = 2 * (x**2 - x) -x * (x + 1)\n",
      "expr"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$2 x^{2} - x \\left(x + 1\\right) - 2 x$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAAJcAAAAZCAYAAAA8JbzRAAAABHNCSVQICAgIfAhkiAAAA6NJREFU\naIHt2nuoZlMYx/HPYcwwxhAacsJx0HSIaUZuM5rkEk3+UErRRGamlFLCHzIuJ3MRmSjRFPJqKFKa\nlISUUSaS6+EPigYpySSDccvlj2cfZ8/rXPbZe61zDva33t53PXvv33r2ep51edfetLRkoiez/ulY\nigOxDOvwauY6W/4HzMOdpfKl2I3e6XGn5b/EyfgDxxbl+fhTJFlLSyN6xLQ4PPWeKJJr8bR51DKt\nnIZn8DyG8Ih009gWbEqklYpzsO90OzEKc/H+KPY52IB9MtSZM/aW4EUcVJTnicX31+hrqL0Kd8v/\nB2IynI1LMtdRJwlOxZtilB+NE0RbpiRn7MFzOK7Ltljc5JMNdFeI5CJGib4GWqnYH49PQT0Pqd77\nB0QMOnjd2MkFD4glRypyxf5vfsDnWNBl/xbf1NRcjtU4vPhcjDPrOpiQW3HRFNTTUa8zdYyfXAux\ntYbuWOSI/R4M4Rcc02X/Cj/W0OvHLtFI5c/8Bj6mYgh7T0E9HXmSCz6Vri1Txx7MKv0+AwcUgsMc\ngcPwStd1p2ClaIA+rMHVYs7uxe34xNQmUlWfBsRa4vcGGjOBd8X67OUEWjliPyEbRRCWlmzH434j\ni/MOPi7OWSb2tm6oIp6Qyfh0GTY31KhKR76RazOuqaFdlayx78f3WN9lf1AsiId5Gm8Uv4/EPTik\n4g2kYjI+XYe7GmpUpSNfcm3EzTW0q5Ak9mNtDczBNmzH9V3HjsZnpfKXojHWVnb9nywqNKpuVbyD\nq2r6dJOYArqPNbmvx8Q9dHOUmGp+HeXYarw1hl4HVxq/PTbhC9xXlJu24TDZY78Fd1Q4b0D0sPMm\nI56ZiXxaI3pgE42qdOQbuR7F5TW0JyJZ7PcaxTYo5tHbSrYrxrj+XNErt5ds/RUcy8lEPu0QC9Um\nGjOBPryXWHNQwth3J9fKwrauy35W8b2f2B0+qSifLx5T7C7p3Tie9xmYrE+viYfqTTSmm9ni39yH\nCTWTx768FbEc9+IFe+5ezzIyRK8oBN7GbyJTvyudu1YMq1PJZH36SQRlIT6qqZGb4eedc40Er8wF\neCphfVliX1787cTBY1S+XuxqHyqyd2dhHxTrl5/FEPksXqp8S2mo49Misfa6toFGFTqF1o4K5y4Q\nwekVb5AQu+Mf4GE8UTp3q5iudtXwaTT+rbGfsWwQD4Fz0pH+WeoqXJhYsyUxPbhF3ldulkj7esxs\nMSW2tLS0tLS0tLS0gL8Aw70WdN609mcAAAAASUVORK5CYII=\n",
       "prompt_number": 40,
       "text": [
        "   2                  \n",
        "2\u22c5x  - x\u22c5(x + 1) - 2\u22c5x"
       ]
      }
     ],
     "prompt_number": 40
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sympy.simplify(expr)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$x \\left(x - 3\\right)$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAADwAAAASCAYAAAAHWr00AAAABHNCSVQICAgIfAhkiAAAAjBJREFU\nWIXt1k2ID3EYB/CPZWUtS1Gbt8hSNnm3xSopFKVtJS8Hhz0oB0RxkTZSHBBFrVxQ3BZpb3JwwEG2\nFnvbEoqDAyKtl7Zdh9/87ezssPv/z5zYb00zz/P8vs8z85tnnu/wn2FURn45ZuB19lspGquwF99Q\nER2n0BnFp6ERl/MqOBrHMD6vhEVgGdowLuZrwRcsjfk2Y0deRfdhcV7JisQF9GF7zLcl8l1MrL0l\ntjFlJRaswFq8KJGfFR3C2/wc802Mzt2JtQ/RkLVgA45kTZIzzqIHSxL+5bhaMMYkgiuwW2iNOdgj\nDIbJwnA6jpdYjzspRYfLzxs1aMIBPE/E3mJhGmk+Lumf3NfRhXqsQS8OR7HbKUmK4eeFxqhmF45K\nV53yKD4ILaiM2a14El3PwjlMiex7mJeBnzfG4gEep9SYhPY00uyE/U7QtTTcRF0GPuFb68CzYR7X\n/pIL1gmfUmvCX4O7Q3DVRuQNf4g3Y2sGflYsMFgSq6KavZgQ8+/EwaES7scPA38q5sau63A+Az8L\nqoS/qx7h7RVQKTxwn9DGBVwR676CDlfgDBZF9kZBY7tj6+Iy9BQzhYFQCj8Lfgrq8gqfYv7a6Nyu\nX5+n4yveJJNsE1phl9AunXgUizdjdYJTL8hOqfwsOI1DBk7lG8LDrYzsMpwUOuI3CoSpwhv6ENkn\nhKn7XdjRNtxPKdwg6Or7EvlZ0IRNQmtX46OwsQUJqo5qf0ojj2AE/wh+Ab53hjlM0CmkAAAAAElF\nTkSuQmCC\n",
       "prompt_number": 41,
       "text": [
        "x\u22c5(x - 3)"
       ]
      }
     ],
     "prompt_number": 41
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "expr.simplify()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$x \\left(x - 3\\right)$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAADwAAAASCAYAAAAHWr00AAAABHNCSVQICAgIfAhkiAAAAjBJREFU\nWIXt1k2ID3EYB/CPZWUtS1Gbt8hSNnm3xSopFKVtJS8Hhz0oB0RxkTZSHBBFrVxQ3BZpb3JwwEG2\nFnvbEoqDAyKtl7Zdh9/87ezssPv/z5zYb00zz/P8vs8z85tnnu/wn2FURn45ZuB19lspGquwF99Q\nER2n0BnFp6ERl/MqOBrHMD6vhEVgGdowLuZrwRcsjfk2Y0deRfdhcV7JisQF9GF7zLcl8l1MrL0l\ntjFlJRaswFq8KJGfFR3C2/wc802Mzt2JtQ/RkLVgA45kTZIzzqIHSxL+5bhaMMYkgiuwW2iNOdgj\nDIbJwnA6jpdYjzspRYfLzxs1aMIBPE/E3mJhGmk+Lumf3NfRhXqsQS8OR7HbKUmK4eeFxqhmF45K\nV53yKD4ILaiM2a14El3PwjlMiex7mJeBnzfG4gEep9SYhPY00uyE/U7QtTTcRF0GPuFb68CzYR7X\n/pIL1gmfUmvCX4O7Q3DVRuQNf4g3Y2sGflYsMFgSq6KavZgQ8+/EwaES7scPA38q5sau63A+Az8L\nqoS/qx7h7RVQKTxwn9DGBVwR676CDlfgDBZF9kZBY7tj6+Iy9BQzhYFQCj8Lfgrq8gqfYv7a6Nyu\nX5+n4yveJJNsE1phl9AunXgUizdjdYJTL8hOqfwsOI1DBk7lG8LDrYzsMpwUOuI3CoSpwhv6ENkn\nhKn7XdjRNtxPKdwg6Or7EvlZ0IRNQmtX46OwsQUJqo5qf0ojj2AE/wh+Ab53hjlM0CmkAAAAAElF\nTkSuQmCC\n",
       "prompt_number": 42,
       "text": [
        "x\u22c5(x - 3)"
       ]
      }
     ],
     "prompt_number": 42
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "expr"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$2 x^{2} - x \\left(x + 1\\right) - 2 x$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAAJcAAAAZCAYAAAA8JbzRAAAABHNCSVQICAgIfAhkiAAAA6NJREFU\naIHt2nuoZlMYx/HPYcwwxhAacsJx0HSIaUZuM5rkEk3+UErRRGamlFLCHzIuJ3MRmSjRFPJqKFKa\nlISUUSaS6+EPigYpySSDccvlj2cfZ8/rXPbZe61zDva33t53PXvv33r2ep51edfetLRkoiez/ulY\nigOxDOvwauY6W/4HzMOdpfKl2I3e6XGn5b/EyfgDxxbl+fhTJFlLSyN6xLQ4PPWeKJJr8bR51DKt\nnIZn8DyG8Ih009gWbEqklYpzsO90OzEKc/H+KPY52IB9MtSZM/aW4EUcVJTnicX31+hrqL0Kd8v/\nB2IynI1LMtdRJwlOxZtilB+NE0RbpiRn7MFzOK7Ltljc5JMNdFeI5CJGib4GWqnYH49PQT0Pqd77\nB0QMOnjd2MkFD4glRypyxf5vfsDnWNBl/xbf1NRcjtU4vPhcjDPrOpiQW3HRFNTTUa8zdYyfXAux\ntYbuWOSI/R4M4Rcc02X/Cj/W0OvHLtFI5c/8Bj6mYgh7T0E9HXmSCz6Vri1Txx7MKv0+AwcUgsMc\ngcPwStd1p2ClaIA+rMHVYs7uxe34xNQmUlWfBsRa4vcGGjOBd8X67OUEWjliPyEbRRCWlmzH434j\ni/MOPi7OWSb2tm6oIp6Qyfh0GTY31KhKR76RazOuqaFdlayx78f3WN9lf1AsiId5Gm8Uv4/EPTik\n4g2kYjI+XYe7GmpUpSNfcm3EzTW0q5Ak9mNtDczBNmzH9V3HjsZnpfKXojHWVnb9nywqNKpuVbyD\nq2r6dJOYArqPNbmvx8Q9dHOUmGp+HeXYarw1hl4HVxq/PTbhC9xXlJu24TDZY78Fd1Q4b0D0sPMm\nI56ZiXxaI3pgE42qdOQbuR7F5TW0JyJZ7PcaxTYo5tHbSrYrxrj+XNErt5ds/RUcy8lEPu0QC9Um\nGjOBPryXWHNQwth3J9fKwrauy35W8b2f2B0+qSifLx5T7C7p3Tie9xmYrE+viYfqTTSmm9ni39yH\nCTWTx768FbEc9+IFe+5ezzIyRK8oBN7GbyJTvyudu1YMq1PJZH36SQRlIT6qqZGb4eedc40Er8wF\neCphfVliX1787cTBY1S+XuxqHyqyd2dhHxTrl5/FEPksXqp8S2mo49Misfa6toFGFTqF1o4K5y4Q\nwekVb5AQu+Mf4GE8UTp3q5iudtXwaTT+rbGfsWwQD4Fz0pH+WeoqXJhYsyUxPbhF3ldulkj7esxs\nMSW2tLS0tLS0tLS0gL8Aw70WdN609mcAAAAASUVORK5CYII=\n",
       "prompt_number": 43,
       "text": [
        "   2                  \n",
        "2\u22c5x  - x\u22c5(x + 1) - 2\u22c5x"
       ]
      }
     ],
     "prompt_number": 43
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Expand expression\n",
      "expr = (x + 1) * (x + 2)\n",
      "sympy.expand(expr)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$x^{2} + 3 x + 2$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAAGAAAAAYCAYAAAAF6fiUAAAABHNCSVQICAgIfAhkiAAAAyNJREFU\naIHt2F+oFVUUx/GPppVkKglp/+VakUh/7hVSNCzIIKSHXuolCUkheoigeqgEC7WCCgSFC+LLlIFB\nQSAV1EP/IKMoxXq7EOKDED70lyyt1Ic109meJu+cOXPuuZfOFw5n9tozs39r1v6z9mZAX5lW87nl\nWIm5WIWt+LQpUQPOzWy8mJTvx3Fc0R85/z9uwikszstzcFoEYsAEME1MQcX0tVQEYLhviqYwddeA\nlD04hicaeFdVVuBh/I5Z+e95fDuBGqpwK54S+q7El9iMo0018BBe0n0gZ3Zw7zD24cLENopfcEuX\nOsajE50j+ADz8vJskagcw6ImxKwVASA+Rjcv3a36Ir5dTHn3JbZ7ctuOLjRUoROd7+LaNtuw0PlG\nYZheU8hqXIb3sBB35+W6zFS9dx0Uvf3nxHZx/n+8Cw1V6ETn7fgQlya2g/gJawrDjBoihvCOltMF\nc2u8qw6v5b+UEfyNvROkoQqHcT0uarOfkHy79gAswzoxTBZho1js5omh9yy+E6nnZGEx1uNRHGqr\nq+pPL1ghPvT3ie1yLMDHZQ9ch51aC2qGMbHjXSVy/15lOpnO15B7hd4xPO3fiUAv/KmjM+UFMVJX\nllWOOnu4vIkv8uur8Armd9H4ucjUd+x8fITPnK2vF/5k6uscwq/YlhrTXnMNjiTlo3mDm2o2WMar\nuLnEfrUYqidL6jbg63Hee4cIwlta2VE3/jSt8wJ8gv14vEL7loh5c814NzZEpnrPukEch6QUxyGn\nRL7dTlP+ZOqNgD3YUlbxX2nonSLK+xPbUI2Gm2aOSOUOaJ1FEfMqMaLPK3mun/48J9aezYntweKi\nCMAssaO9MS/fhW+08urpeLKXKityUmRuh/FjYl+S/38l9geTxZ91eVtb2+y3FRdFGro2F3QAf4re\nkW50Nolh1G/+wMtiO58G4DH8hkfy8mTwZ7XYtb+P1xP7DDEd/lMgFohM5M3LRA47il2i1+3D5z0W\nXJVnRN6/F3+JvPoHsRkby++ZDP68jUvwQEndthJbX8k0dEDVYzJTQ2fHjOjspLFfTBWdAwYMGFCF\nM2grpp2F+AGZAAAAAElFTkSuQmCC\n",
       "prompt_number": 44,
       "text": [
        " 2          \n",
        "x  + 3\u22c5x + 2"
       ]
      }
     ],
     "prompt_number": 44
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Factor, collect and combine\n",
      "sympy.factor(x**2 -1)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\left(x - 1\\right) \\left(x + 1\\right)$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAAGYAAAAUCAYAAAB/NUioAAAABHNCSVQICAgIfAhkiAAAAu9JREFU\nWIXt2F+IVVUUx/HPTOXoTESKNGh/GIKwUdSyVBACUaQ/RASBDylUGqT4EEU9WVgPPlQggvggglyp\nlyBCgigfRCKSQKI/1IOEYNiTSWKYYijTwzqHOffcc+6f8R7nOtwvHLh773X2/a2991pn702fW4Y7\nMDbNGobxS0H9Amxv8e46zO66ohunzKch7BbjXspt2Jl0Ml2sxElMlLQ/jY0lbWvxQgWasjQdwBJa\n+bQYHzbrYAeWTeGPu8E4vkQN3yt3Aj7TGBUj+KQSZfUcxL1t2nbi036sLmqYg0/b11cpNc2deF1j\n1LyLZ6sSlKFmaqm+prlPi3AkLQxmGjaIcLsV+BZP5eo24qtp0NItTolsdRfcnmlYj88LXngMm8Vs\nj+FVvIa7RUjvwunK5BbzJ5ZkyuM4h+sFtr2ov4yfxPfoWDZi7sP5nOFDeBlvJs8/Ild+gy/wIp6v\nWGwRFzA3U34EvxfY9ar+Ms6JlFYXMXfias7wDbxtMjeOiEE5gfuxR+TOm82wGOSUUVwssOtV/WX8\nLSK5bmL+Ur8K4QP8mymvMenIWbyVaVuetA20KeJHvNKmbZ75Ip2lzMa1ArtO9Oc5LHzK8wBW4b+C\ntq34oUmfrRgSUVM3MadEOstuAP7I/B7HQhwv6fRnPHoDojrh8ZyO82LA8nSiP89LJfU1vIczbfbT\nCfMkE5v9xnyNJ5q8tF6skhOZuge7Lq091slsLcUgjbZ4p5f0lzEmFnjdxJwUEZOebOeI0+jSpLxB\nXClcTsqDmqeCqliIS+qj4TuNB+Ne1V/GLOHbb9RPDOw1GcLPCOFL8LBYXdnNwU58XJHI9FSfvxoa\nxDa8n6u/IhxalKmbTv1FlPmU8qQWB/znhDPzcQgfJc+I+CAewD6xArvJPTiKX8UuakJsSI5jU2Iz\nqnGDkrI80ZVSlf6a9k/+7fiUckRyuJyJ7BYXglVS0/3b9y0abzJmFAN4R7XX/itM7Ya5jFkijfXp\n06fPTON/dymdxWSGVdkAAAAASUVORK5CYII=\n",
       "prompt_number": 45,
       "text": [
        "(x - 1)\u22c5(x + 1)"
       ]
      }
     ],
     "prompt_number": 45
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sympy.logcombine(sympy.log(x) - sympy.log(y))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\log{\\left (x \\right )} - \\log{\\left (y \\right )}$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAAGkAAAAWCAYAAADD9rIuAAAABHNCSVQICAgIfAhkiAAABA1JREFU\naIHt2GmIllUUB/DfTDYtGkouZaszZSUWkrbQ5FQSLhTtEbYQlJUQtLhAH4IWWm0hWrCNNqSN+lJB\nBX0Iy6KIMG1BI2UkyywtwRItyz6c+zb3febtdQbf12ni/cPDc++5597n/O9yzrkPDfQbnI0PsAxz\n+tiWeqNfcx2F33BL35qxUzBKP+LanJU78VMf2bGz0akfcW3evkoDfY3GItUf+2H3XuiPwGW5YEAP\nOh2Pa7A26Q/BnVhe0Lsc0/AtDsA7OALH4CU8hl0wGW+nPhNwCbaJOHEFZqZv7I+bsQKHY2sq1xO1\n5AqDcT4eSvU2zEYrnscL2ZhzcCymYwMmYlElIzuVB9MzkoHDM9mYpHd0JpuJX5NRMBp/JqOn4cwk\nvxCDMp2H0ZTqz+JrtONE/KU8+yrbXTVAp/pyhVt18YVH0YLrsLRgzxK8nMpNeLInhg/COlxfQe9B\nfJbVl+Ljgs5aLCjIZmfl+RiY1V/JxjgQ92Fo1t6hfLJ2FJ3qy3U47s7qE3FRKr+FV7O2IWKhr85k\nd+EQqru708UkLavQthzXCnf1qSC4d0Fnt8L4A4VbK2GeSINLaBeniXAjcwvjfYFzsRjjkm6TnmGx\n6iex1lxhqriPlfANPhFufIpwgyV0iPxgYSb7CKdgRbVFakvvrRXa/kjvQ5Pht4s4MxZfimPfgvuz\nPkOwMauvyspjRIB9t4o9G0VQJVxDLU9VrbkSm25eVv8hvS8Q7vLNrK1DLP5Xmex7cfqqnqQ16T2i\nQlvJDa1N7824CVcmUi0Yr3xn/qLcP+c4Fb/jw0zWhpVZfTDWV7F3R1BrrjBSTHwRU8Vm3JLJTsJ7\nyj3NBrGxqy7SG9gkMqsiJmC1ruyjXeyMYjDMsUlXyr+HCKoL8LnI+JYmHUlvrnIfPU64gHqg1lwJ\n976lgvxgvF7QG6880yPmaCPd70kDdC3celyFGWJXlNCKSbhUl3v4DneIE3Fy+ui+useMH8Wd4TSx\nCGNF6tpWIHSj7oG41fYnpjeoN9f1ujLAHKuUx7R7sKvyeCTprMkFZwl/u00E84W6LmAdYpXni5T5\nKRxVGHBYMmpb4VmNizO9FuHDh+Fp3JuegXgOj6dvTC6Mf5iU6dQAO4vrbRX6EptyER4RGez7+Fn3\nAzMLJ/SW3L/hIOGPp4jLKkG6TdxztohJ/j+gN1wnidNZDc0ioXimQtsTevazoUeYhdeqtC/BebX6\nWB+jN1wHiNOS40XlLvsckYiMLui1irS/ZjhS3GvaK7RNERnaPrX8YB+it1yni5hVwjrhRokrx8qk\nk6MJN4jQ8I+gFmgTu2wvkZE0Y0+R6z+gciraX9FbrjPEf7rN4gJ7XOozUixYMWMdKv4+bKiP+Q00\n0EAD/1n8DT2oErc9SCWJAAAAAElFTkSuQmCC\n",
       "prompt_number": 47,
       "text": [
        "log(x) - log(y)"
       ]
      }
     ],
     "prompt_number": 47
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "expr = x + y + x * y * z\n",
      "expr.collect(x)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$x \\left(y z + 1\\right) + y$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAAGsAAAAWCAYAAADHA2ITAAAABHNCSVQICAgIfAhkiAAAA45JREFU\naIHt2VuoVGUUwPGf53T1EGVZUZINp5tiERhGnVS6aSERBmLR7cUeAh9CulD5UERgWlSQlb7UWNGF\nIILoIQhEuxMFXV66IFQYlTcMiu72sPZ49kx7j3v2mT1TNn8YZr7L/tb61trf+tb3DQP+V0zHtf1W\nogST8XFG/TAeTtr3Kw7H0ziwjzqUkT0H72NPTvupeKq0RhXZY2iCz9+Lh/B7F3Qpy2OYVrDvTLyK\n5fizTb/PsQXX9UCnnjCK1/utBOqolXwub2XBVBEmh0uOXSvxXFsmsrKWixC4v7IdW3FBvxVp0Oqs\ns0RYexAv4UjcgdV4Biel+i7CmxljjmKtCDdXt7TdjOdT5RuwDZ/gjKRuFWZ1OI+qeAuXVyyjE3vt\n5RQ8gklJuS5i9xjOw1/Jw0Q83pEj/HEchJv8M9v6CC8kv+dhM+7CfXhWOP/ONhPLoq6aMAiXCYeV\nGbtWsG9Rezkg1bACtxqfwAh24W2cIFZbPWmr4YcMwXPxBn7DpcLZDY7A6ViflL/HhfgjKS/FYuG4\nfws7xEtcFZ3Yq8lZq/FTqjxm3Dnf4JZU27HYnSH8S5EST8NCLEm1zRNhd1NSTiu2TDjuerGCs9iA\nMzPqp+NsMeFWluGDnPGKsFMcT/KYqE6d2CuXmWKFXZzTvlSsuDxWCGcenKpbI/anSS19b8M65ZOd\nuurC4Cz8WHLsWgf9C9krz0AXibci7ZDR1O9tmNJG+CXYiF9TdfPFHpU20D3izb3R+IpqN26vmSI7\n3HebQvZqOOtQ4clGRrZAbHY/p/qlw+BWHNVG+In4LFUewWzNS/pu8dasTNXNaCn3m6PFFlA1Rey1\nd89aJJzxobiNGNW8J63UfKb6QtwAHI9vM4R/JdL+BmvEFUxD+GKcg1dECPxaJDELcf6+59YVDkm+\nJxt/KVuZg/d6oMu+7NXEVDyB+5PPiNg814t0fkHGMxtwZY7wGSINX4sHRMazU6zQwzQfEW4X+8I7\nOK3IzFqoK74/HIPX8KkIL3tESN+IazL6b8a5FetEe3t1hTG8WKDfEL7Dk90S3EJdBVc74gKgbCZZ\nV16nyuz1suZbDXhO8+HuCvyiuvPKbNXccj8qNv4ydKJTz+x1srh5SKfj20WYI/a0Lbiq24IrZr74\nT6sXFLZX65mnDHPFSXtdUl4iDoRDOC5R5N0uyOkVw+I+dJX2f6N0i/+6vQYMGDCgV/wNXCPMEE54\n8dMAAAAASUVORK5CYII=\n",
       "prompt_number": 48,
       "text": [
        "x\u22c5(y\u22c5z + 1) + y"
       ]
      }
     ],
     "prompt_number": 48
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "expr.collect(y)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$x + y \\left(x z + 1\\right)$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAAGoAAAAWCAYAAAAowQktAAAABHNCSVQICAgIfAhkiAAAA2FJREFU\naIHt2UmoHFUUxvHfe2hezMMRUUxQQ0SS5xSJOCBGxCERcRExhKAQxGThNk4kREGEoHmKLoxiELRE\nQd1IUER0E+IQA6LEaeGAOGw0SkTFeYiLU0Xf13a/dFV3vcqi/9BQ91bVqe/UuffcU7cZMqRmLsXs\npkVUZA7e79A/hs04dCbF1PmwS3BtjfZ7pYqP5+Jt7O9y/jRMVlZUgccwrwa743i6BrtVKOPjBF5C\nht26Bwoexvl9KStBhvk12L0TV9dgtwqZaj5mpg/UQmxPO0YrPKRpVuHlpkXUzMc4C0cUHe2BOgcP\n4gE8j2OwEVtEujmlJmELsFWkhuvazt2CZ/PjCezFPx1slNW+Dt/hA5yZ992D0/vwY5DsEesZpgbq\nVNyAm/PfTyKX7sQL4gWuqEnUbfkzX8WGtnNrMJIfn41PO9xfVvvS3G4xODbiDfyMj/p1ZkDsFSkQ\nHJKcWC9eWJE7x/EDduFEMVKzGgRdhNfxJ67EJ8m5o3AGtuXt4/FjBxtltX8ryvu/8/YqEch7+/Jk\nsOwT/mNqoLbgl6R9oZZzX+PWLgafxOIO/SfhPBGAdtbinfz4M1GuzsMyrEyuWypm/c68PVvr5aaU\n1Z4OhrUiaGvwbwfb9O9jFcbErJqWCTE6L+/jQZlyFdF6MVvGkr5JsY4UqW8dHjmAnTLab8ejqhdV\nmXqqPnhCsl53E3iZGCW7kr4FFQSVYTl24I+k72K8puXUFyL9TUev2u/GkbhJayYdXUpxvczHe0Wj\nCNRhYvQW1c8VYovj1+S6bqlvUJwsytKCcSzRSnvwpihbU6pov0vM0k1J36K2dpPMwlxJYVOsUVcJ\nZ97FX2IEpov2JjxVs7gvRUldMCm2aNJA/SbEL9QKalntK3ABXhRp7ytRcCwTW1MzQbFHOUdrQKUs\nx3OdbjwWj+O+/DcuFtBteEiM0rJkyuXvRaJE3or7RSW4z//T8+JcU0EZ7YfnfcWat0GU8m9JSuES\nZHr38Ti8gg9FKt8v1t8duL7t2u2Sj926yVTfQhrFN2JB7cRmsXnZNJnBb5PdKD5TZowlet9dfsbU\nbf9r8Lv4kO3ECO7Q/N8cZXzshVki7R20fK+Vzubic6xuTs7Bx8iBL5kRVooPx1GcIIK2u1FFQ4YM\nGTKkaf4DX5a8hcrghaEAAAAASUVORK5CYII=\n",
       "prompt_number": 49,
       "text": [
        "x + y\u22c5(x\u22c5z + 1)"
       ]
      }
     ],
     "prompt_number": 49
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# apart, together, and cancel\n",
      "sympy.apart(1/(x**2 + 3*x + 2), x)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$- \\frac{1}{x + 2} + \\frac{1}{x + 1}$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAAGMAAAAeCAYAAAA4h6CKAAAABHNCSVQICAgIfAhkiAAAAhZJREFU\naIHt2T1oFEEYxvFfxICgxkZQEUOI2EYQRMSQVhHEyoBYiB+liIpgYXONmMZOtL1gJQg2YmNrYxEV\nLAVb7QWLFMZitrjE5bIfszebu/03N3M7++7z7Dtfu0vHxLMfbzCbWkgkdqyf2+hhA3NJlcRhLPzs\naPE51PazK46OjhhMUjKmUwvYjklKxgscTS1iGJOUjGktHx2TlIzWkyIZ1/AyK6/gTgINMRk3PyOh\nr+Vb6W6aahFTA+WTQu+Zym/6H19wI7agCKwKXrYyi19Yzzl2C2tNiurYTF/Lp6ndEWJsRIhRlaKj\nuAzJ/MRIRhM3JCXJ/HQLeItoezLO4L7wivoDlpKqiUNrv31cGXJsH54O1JfxR/X3S32jWcCHeWr1\nt4/ekGML+IvjWX1GMLFc8VqnjObdVK9Am9xkxFjA4RxOCPv7NezFeTzEj4oxv+HswPnHst/vFeN9\nLtG2CT8jYUZ4aILL+JSVV3F4m3N7Ja7zCs9KKatGHT8kHhnrwo0i9OS3Wfn6lnaHcM/mreMi9gzU\nf+NJzjVu4ice1RVbgKJ+qOepcdZwOisfKNC+V6DNRSEZBJNzpVVVp6wfaoyMGFvbS3iQBV/A1+z/\nvJ5UliUcwXthiriQ1ZukST9DiTFNHcS8YOIx7gpb0Nc1487jnbAvH6RoD61KU34I3z4Ws/IKPuJ5\nhLhRuJpaQAOMo6eOjo4O+AcByFZnteZaHQAAAABJRU5ErkJggg==\n",
       "prompt_number": 50,
       "text": [
        "    1       1  \n",
        "- \u2500\u2500\u2500\u2500\u2500 + \u2500\u2500\u2500\u2500\u2500\n",
        "  x + 2   x + 1"
       ]
      }
     ],
     "prompt_number": 50
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sympy.together(1 / (y * x + y) + 1 / (1+x))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\frac{y + 1}{y \\left(x + 1\\right)}$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAAC8AAAAkCAYAAAAZ4GNvAAAABHNCSVQICAgIfAhkiAAAAlpJREFU\nWIXt2DtoFEEcx/FPckYD0YgEfMZXISqKWpiIJEJA0UYREfGRQgtBEAVfpcVZCGJlJ4KgINhE0D4I\naqkEBAsrBcEHWmoUFCEWs0v21tztXu7WFN63ubnZ/878dnbmf//f0aIh5uEBVsy0kDSHMq6fRBkT\nWFW0mHop54yblvj2nHElnMYd9Ed9vXhW74TNJK/4AxhBp8kV2okPBWjKzayccaPR5y5hn8IQniZi\nFuEc2hJ9g8IDx3zD1bpVNoEjQlaIeYv1GfeUc45d6J6HpXgTtdeiC6/rnbCZ1CP+EVbjGK6r3DLT\nZRg3o/Y1nGnCmJmM4kSOuKMF68jFBiGztGEAL9Axo4qE/J2HdiEzLccOIeePFyWqRYsWUxP/lE/M\nqIoWtenMDvm35C0PdmNZkUISTGULe7E3HZhH/EKsNFmUNUIeW3gRB1Vqe4/5Qm1VF5fRXe9NVSjn\njJuqRJ6DK8mO2IyUcAp9QpX3XHhV9/EKX1MDDWANNmNMKI/34JJQ5xfBT/QkO+JXU8vmzU4N0o11\nuIsnOItbgkv60XTJlfyWqMfila9l87alBviFe1F7Ox5G7eOpuCJs4bhwBj+lL1SzebdrDDYmbDXC\ngcqinEtidVt4A3PjL8kTXc3mpbfCPlyIBt+El1F/euWLoCRRiifr+c9CKuvAeeFBRoSD+S5x04Bg\nTnqE/236sUV4a98zJh8Szkk1hgWvsBVLsFhIHoSFHsTjjDkqbF6XcCibQSO2cL+waH+RZfP6sLGB\niRtlAQ6nO+Ntk2XzPuJLwQJr0WbybLVo8d/yB5LfYqbcHC5oAAAAAElFTkSuQmCC\n",
       "prompt_number": 51,
       "text": [
        "  y + 1  \n",
        "\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n",
        "y\u22c5(x + 1)"
       ]
      }
     ],
     "prompt_number": 51
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sympy.cancel(y / (y * x + y))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\frac{1}{x + 1}$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAeCAYAAABNChwpAAAABHNCSVQICAgIfAhkiAAAAQpJREFU\nSInt1r9Kw1AUgPGff4aCqIODdREXQRDUQQWpg5uTo4M4uDgJgogPkMWHcBNcBV9BHIWCT+BLFB1c\n6tAbWkq1oUkaxPstOUnOPffj5iY5/GFm8YjlKiY/R4I2VqoQSMktMFmMRxSIAqMzNeK4U1xgG0uo\n47Uoqcj/YiIc25VaRMZAqb3D8ZD7pfcOSca8gQLTPXEDq9hEEzM4xA3e8xj+RvozmsMa7vGMS9yh\nhc+yJqe7Al94CPEenkJ81pe/iCvd7wfso9Zz3sJtHqkmdkI8nyE/yVh34B5IH8ERrkPCBt7C9f4V\nKJy0H2hgHQt4wS62dN7djyE1DnT2zU+U3jucFFksMna+AbcuJAAYJBUuAAAAAElFTkSuQmCC\n",
       "prompt_number": 52,
       "text": [
        "  1  \n",
        "\u2500\u2500\u2500\u2500\u2500\n",
        "x + 1"
       ]
      }
     ],
     "prompt_number": 52
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Substitutions\n",
      "(x + y).subs(x, y)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$2 y$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAABYAAAAWCAYAAADEtGw7AAAABHNCSVQICAgIfAhkiAAAAXNJREFU\nOI3l1b9LlVEcx/FXF0viOkhD/hoSKQiaamiQi/9Bw4UGEfEPaAlpFsLCQaKGgqZoSFBBw0WuuYQ/\nhrtaU0uhU6gZoYMOUsNzLpxOefX6gIsfeOB839/v8znf58s5PJyR7uI9KviMN+jKa3oHi2gNcQuW\nsYnuPMbzuJ6w2/iNqTzGe9jA1YT/xHajZoVo/Q1tKCY1B7jcqHGsItoT1ikbxceI9eCVbHQDSf0j\nJxzbGA7RG7HXuISH+JTUr2H6ONMe7OJpxEpRlxXMRLnW0MSDeqbNqOJ5wttDriuYlKPcPdnYbtUz\nfofROvlh/Aqb1DSOLVw46qXHGEnYUBIvYC5hVczWgkKSHAzsScJLSXwNX6K4KLu5SzXQFCX78AIf\nMBHxJtnsYq3jShSP42JsHOtHMPjfk37BTazKzvMzrGDHvxPIpQK+421eo0l/X4wy9nEjr/E2XoZ1\nJ76iPy068szV0X3ZD6GAjrBJ9XQ9ngv9Acs8RvtKm6neAAAAAElFTkSuQmCC\n",
       "prompt_number": 53,
       "text": [
        "2\u22c5y"
       ]
      }
     ],
     "prompt_number": 53
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "expr = x * y + z**2 * x\n",
      "values = {x: 1.25, y: 0.4, z: 3.2}\n",
      "expr.subs(values)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$13.3$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAACUAAAASCAYAAADc4RcWAAAABHNCSVQICAgIfAhkiAAAAW5JREFU\nSInt1T1IHEEYxvGfcogfiRYBLVIGISLEDwykkvSxSGNvF+zSxt40FoKClcWBiIKdkCJVqkDAQIoE\nFEHEUoQERRIIh1rMHKyce7dzZ6HgA8vC885/9tmZnXe5g2rL8bvxDS9y6q/wDv/QFa95/CzwzKbY\nl9jBZU59DNvozHgrOMNog0DJ7BA+oSysUl6oxVibznhT0VtqEKoQ254p7uINZrBXZ+IfwpudZrzH\n8f63QahWWGX5K3WTFlDBSAKTzKaEeoYTzDYRKIktEuotlrGPD/JP8q2xRUJV1YEv+IonCcGS2ZRQ\n8DqO30oMlcTWC/VcbVPtjeMv8KjOvK2wuaF6hU5cET7Sqnri+Ev05cxZmG2vQevrP0o4xJ+MPxTv\n313vQYPCb6QZtkabMXn3DbWPeO/6iVnDOSYy3qSwJZ9T2VKm2B8HPMVw9I7wC6tYj96c0PU3hK0Y\nwG+MC0e8qmOhBx1kvKLsg+6vrgC4+G/XoKooVgAAAABJRU5ErkJggg==\n",
       "prompt_number": 54,
       "text": [
        "13.3000000000000"
       ]
      }
     ],
     "prompt_number": 54
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Numerical Evaluation\n",
      "sympy.N(1 + pi)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$4.14159265358979$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "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\n",
       "prompt_number": 55,
       "text": [
        "4.14159265358979"
       ]
      }
     ],
     "prompt_number": 55
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "(x + 1/pi).evalf(10)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$x + 0.3183098862$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "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\n",
       "prompt_number": 56,
       "text": [
        "x + 0.3183098862"
       ]
      }
     ],
     "prompt_number": 56
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "expr = sympy.sin(pi * x *sympy.exp(x))\n",
      "expr_func = sympy.lambdify(x, expr)\n",
      "expr_func(1.0)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$0.773942685267$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "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\n",
       "prompt_number": 57,
       "text": [
        "0.773942685267"
       ]
      }
     ],
     "prompt_number": 57
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# derivatives\n",
      "f = sympy.Function('f')(x)\n",
      "sympy.diff(f, x)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\frac{d}{d x} f{\\left (x \\right )}$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAAC8AAAAeCAYAAAC8AUekAAAABHNCSVQICAgIfAhkiAAAAsNJREFU\nWIXt1l9ol1Ucx/HXysbGZG5TViTVmqWm5JJwF41AWlIMhjBvFA3/QuiVmlLQRRAEooGEIigRri5E\n+nMXRDG6iTJCUEFQYeoIiSJZtjAzbV6c82PPnvb8ftuz32+7mG944HvOc873fJ7zfM/5fpkh7MSf\nWDDdQvKwAFenW0SSByYwtgtfV0pIHmaVePcOfsZDWIuDOdd5Ch/gPOqxA//l9DUuPhTiHJpwBw05\n/FSjH1vwcfTTWA6BWSzDX6iN7ZfwQ05f3RgWzkw7Vk1aXSQrbF7Gd/g7tjuFeG/E4ATXWInfhd3v\nn7jEbLIO7CB+ifZsrEEf1udYox0/5ZhXkqqM/hocFgTXYn4cexpfjtN3Lx7GK7iAAVzBdjwohM9X\ncezz2CCEVwu24XXhjM0XLo5+LBLOTFn/YBatUVBPqn+d8EfhaRwyspHHcQkvoEO4ld5IzN1cIa3/\no0cQ35rq352wj6Au0f4UP0b7MbyPuYn3L2J5eWWOzbu4YXR41mFXov1Eas41vFfEZyO2MrEMm4fn\ncEbY/QINGEq0BxL2M3gU3xbxOYRmRsQPl+EZi7YoPsmgkXhP04nb+D7Rlw65ObieFF9VhidNEx7H\n2VT/zcS6tdiPZ2N7Fc7FMQV9e1Lz23AqKb4SFA5VWjz8JlzHXYK4pVgs7PI/iXFv45PU3CeFDyzK\nZOv3vfjD2Fm8Gq9iHj7CgfjUCfnhqHB9pkuJhePVM9n6/QQ+n8T8khQLmzz1+5v4Jtor8FkeUeNl\nVsrOqt87hEzYJpQIdULa34PLCR+vCVffMvyrwuKTZNXv9WJSwGoj2a8Xj6R8bMIxnMSSCmodRbH6\nvUY4YLAPb02VqFIUYr5Y/X5LSByE098X7TlTpDGTgvhi9Xu3UEi1CH+okDE3TpnKDAqZsVj93izU\n2xfju7tCBvwCv06x3vvcZ0ZzD5OulIwC6EiXAAAAAElFTkSuQmCC\n",
       "prompt_number": 58,
       "text": [
        "d       \n",
        "\u2500\u2500(f(x))\n",
        "dx      "
       ]
      }
     ],
     "prompt_number": 58
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sympy.diff(f, x, 3)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\frac{d^{3}}{d x^{3}}  f{\\left (x \\right )}$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAADcAAAAnCAYAAACrDdDdAAAABHNCSVQICAgIfAhkiAAAA15JREFU\naIHt2FuIVVUcx/HPyGROU2NaWSSWaUUXm7ELPiSGpFJEQ2AvRUZXiiKhi1HQQyAEYUFEERQRWUR0\nfQuiGHoRK0LKKKhISiKiKKYyups9/Nf27Nl5zpmzZ+9zhpgvbFhrnf+s9Vuz1vqv//r36ZzDcCn+\nwnm4GXtL9DMtGcWDqbwDy3uopXJmidU7GO9jsLdyqmcRNmNtr4XUyRiO6rWIZswq8Td9ufK3WFWR\nlsrpZHK34me8iJtS23H4smJNldHX3mQ/S8U2vBjDwqkcgodq0NV1NuKJXovohP42v92Lr3AQLlPf\nKp2Ih/ExhkRg8E9NY4EnxTmD+fgbh9cwzmzswrV4Jo0zr4Zx9jOMXzCQ6ufj7ZrGGsU+caZXYF1V\nHTfblmuxDb+l+hq8If6j41UNnliN78Xq7aqy42ZXwTi+SeVDRaA8hiuqHDyxAu/V0G/Tq2AOHhUT\nGsDCZLsDr1U09lYcjQvwCXbjC9witubrOduzsUFs38W4HjcKH7BQOL5+cV4rXf2psEQIXp9ru1zs\nloyT8IjGQjyNz3AuVgqvekf67ZoatXbMejG5Jbm22ws2j5n48ngJ76byIvH8OiLVV+HM6mWWYzN+\n0liVQdxWsDm+UP8a9zXpbx6uyyplAucqWY4PxOoRZ2hPwWZ3rnwqjsVbTfrbgwVZJZvcvpq/Zoyk\nyWWMm3jeiqzBn9iea8tv6bn4oTi5vil8Q+IgbxCxZ/8BbA7EfPGq2Jlr+9XE3TSALTgj1dfhw2SX\n6d+Usx/BO8XJTYXVWIbncE5OSDuyg7+z0P6duIrgIiH+dJwiVumPnO09eDZXP0FMvjLK5lTuxI/+\nGyXNxoWpfCSewgPpGxT34+PiesiHaieLEK5yyuRUnscrdYipi3Y5lbvwZip/Li7s2mh15rK0Qrul\n7iSncqXwdsMiqfvyJDTWwlKTy49s0cipbMNZLWyvFh71BZw2BW2TolUOZaPwfDe06WOZaZpT6S+U\nm6UVVooAdkS8DAZFNL8JH6VvWtMsrTCkEa9dohG0bsUx3RRYllZphTni7oH7cXd3pZUn85at0gq/\nCw9HXJpjqTy3SxpLk02uVVphVLyxFosVzgLdq7qmsiSZt2yVVlggnvmfpt/2isD1VXGvzTDDDDP8\n//kXEFCw394qLHMAAAAASUVORK5CYII=\n",
       "prompt_number": 59,
       "text": [
        "  3      \n",
        " d       \n",
        "\u2500\u2500\u2500(f(x))\n",
        "  3      \n",
        "dx       "
       ]
      }
     ],
     "prompt_number": 59
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "g = sympy.Function('g')(x, y)\n",
      "g.diff(x, y)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\frac{\\partial^{2}}{\\partial x\\partial y}  g{\\left (x,y \\right )}$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAAE4AAAAnCAYAAAChUX6PAAAABHNCSVQICAgIfAhkiAAABNdJREFU\naIHt2muIVVUUwPHfjJavSjGN1MQ0wlf5IcnEHiopmWQSiikIJmqGQZEFViYZlZaISUFCBWZhWphU\nH4oQ0jKs6P0yrTQsskLFqIyszD6sc7pnTnfmjnfU6+j9w2XO3vusu9de+7HW2ndqlE8tbkSbpLyo\nCd91QjEG3ZPn5zGwgrocdWqbIHsOJiXP2xSMWKUErXBq8vwKulZQl6NOiybIHsCfuBgHhfGqFKEz\nFmIBeid1p+GuimnUTGiHDhiMb4QhZ+Kk5DOicqo1H5bibvyC3diL8yqq0VGmZZlyW9BXbNUTksYa\nrhZzMRzfiS2780gp1RxorOEWoz9GCU+6A+8dKaWOF3oIY6WetBb7MKxSCjUXrsWXmfKV+Fr55+MJ\nwwh8kDy3x+cYVzl1dEXro9jfGZiar6xphGAtnhXZwSl4CqsPq2rBybgT52KX8Nwj8WLSJzFxU/Bw\nUh6IyYluZ2O6iC07oJsImbaV6LcXZqMnVuKZTNutuFCMfxfeLHNsR4w22CAUTLkDf+OGTN09YvII\nAz+iMPlPiiNliEgD/xEDL8UyMWk345Nc28eJTjV4PNvQlNuRw8mD6IcZmboPRS69Pil3FhcLvyXl\nW3C7WG1EZrMXm/AtlghjNsQl2Cic3yh1z/IOIqh/Peljt7gROmbojr9ENpLlPnVjxcniDjClR+79\n73H/IfZ9ppiMbuLS4ppM2xhhsP5JeSympY3HwoobJzx0/nZlqNi+KUPU3Uo7Ms99hdNY79D4Efsx\nQazklzNtl4pVtjkp70SftDE13MEKfWSUeSejdGtxKG/I1HVJBlKMy8V225Sp61XPu8W4Qhh9f6bu\nMryR0fNnsX1RMFxNhT6pQr8mf1OGii2UXUHtMgNrI37jOD8pjxSr8ffMuG4rYqDeiocyPbA119cF\n4nxLaZPo+V8HWYrduTWGcuVgDdqKeIkYxDJxZn2VeW+PCEdgtDBMf7Fie6m7Wubi6Vw/w0WIs7KI\nDjvQMVNeJK7KsobriB/SQj6Oa5cI9MEqDBLxSynKlUuZIQ7fzWLVXCUGOTnzzr14Dp+ikxjcnqRt\nPh7FH2LLvoR1uT76CUPsEzFflj54Ah8l33GRmJROIqwhvPjbeKvUYJbiplIvHUa5lLZi8NNz9cNx\nfRO+N2V+ifZa4TSW5+ofk0kzG/KqW5QXtxyKXGdcnasbLeK3V3P1GzGgDH3ytMqVV6nrrccKJ7Ag\nU9cTn4mA/H/UYh5ewwqR6iwTUfh1eEhsnZlYq+C16pNrgVli5gYl754lPFXKarG62iblLtgusoZi\nTBSHdrkMx/hc3W6RgRAhzfakn5QazBHZRVGWiFlOX9ghcr006BurEDKsEMFjfXLzEgU7ixmdkLRN\nScopk0TstFDc+a0R51tDTFNekt8y6SfPeHFeLhaOY3Cu/XSZMCRPfXduoxQM8oBIcRojN0x4wPbC\nSbRL2perm3s2expz5/a+CEophAWl5CaKVZSyXUT5zZ7UOexRSJ7bi2U7RxhitnDfA4S7JrZcQ3Lp\nIdpV4Vqnt1h5XxzmMVSENI6r785tqrjz2ioi5wMizlqLnxqQS+kltvgLYnWmeWGVQ2Cd8M5VStBf\npE01IqR5V2QXxwVN+aebUtQKJ9FdXNHMUjgPq1SpUqVKleOPfwELGBvTPcXKYQAAAABJRU5ErkJg\ngg==\n",
       "prompt_number": 60,
       "text": [
        "   2          \n",
        "  \u2202           \n",
        "\u2500\u2500\u2500\u2500\u2500(g(x, y))\n",
        "\u2202y \u2202x         "
       ]
      }
     ],
     "prompt_number": 60
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "expr = x**4 + x**3 + 1\n",
      "expr.diff(x)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$4 x^{3} + 3 x^{2}$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAAFMAAAAYCAYAAACGLcGvAAAABHNCSVQICAgIfAhkiAAAAy5JREFU\nWIXt2E2oVVUUB/Dfe3ZF63UTEzIqtCuhYR+aUZIURhIRDSJ60SBQIlChCMlJRPUgIvoAocBBRVwr\naCBFOWgSFEQFEX0hNTAMJwlJHxRkVuZrsPbB867n5bnnnHvf5P7hcPda+2Pttffa6+MyQmMYG/D6\n1+NCnImNeAUfDFjmIHEtrsM52IAn8OGwhP+Ezak9iT8wMSzhDWMCT+Xou3AUFwxrA5fhrNSexD84\ne1jCG8YVOIEViW5jWhzq0PEGHpsLwQ1hTDzzzDWuFoe5Nj/g/7ATLTPNu19cg5vRwf3iaQwL67EV\nf2Jh+p7E/gbWfg1H8FCZwcuEj5tqQDBsw+fq+cxWH2PXYh8W5Hi78TvW1NgD3Itn9BHAXxRmPFVR\n4Hr8iIsTvSqtd2fF9eAl5R3+riRvMse7LfGer7GHW8VhEhe1POsYn2XCHXi/hkA4jm9wONEdEYC+\nrrFmS3nr/FJY4W85Xhb8qrqaG3A+3sVS3JLoWTGBl1O7jmXCPcKn7MCbwnfWQVfOEirgWXHJV1aY\n2xGXM93ztbMBZxRMetjpA846cVDTQrn7hKNfJJ7h4ziI13NzdlVQoEmswBY84NTXUVaftj6wRhxm\nhiLLvAQvOOl8uzggKoMNIhcrFeEqoKt/y7xd7PeA0K03aAxEn3Hswfwcr+gwdzuZiMNefJraF+E5\nnNuv8JLoqv7M54tS9mMz9zcQfbbjxh5e0WEu66F/ELlbk9iDrwq+X/DtLH3rSqy7Uei0N8drXJ+l\nwtR7cboAdGkas6mO8D7QVd4yV4kSMI+sBDyhON+tpU8WgDYl4W/n+rIU5G7hS1/FWz3zb8Lf+CTH\n6+D7KptpEG2RGrWwUgQP+Df9jmFewbyB6bPcqZa5UGT+lyf6HXyW6x8XPmhQ6CpnmQtETvsdFuf4\nVwudsj03qk9RapSh1fNLZP878UXabMfMpPgRUbPONY6JnPIIfs3xHxQl8vZEN6pPUW3ZFje0UmT3\nf4kn8zQ+Ejf5cxo7JW7umHge+/BeWeEV0E0yD5Ucv0VUKcdxnghgj4rUB5aYW33mFF31KqARcrhK\nf/8cjTDCCCM0if8AXum6GYRY6VIAAAAASUVORK5CYII=\n",
       "prompt_number": 61,
       "text": [
        "   3      2\n",
        "4\u22c5x  + 3\u22c5x "
       ]
      }
     ],
     "prompt_number": 61
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "d = sympy.Derivative(sympy.exp(sympy.cos(x)), x)\n",
      "d"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\frac{d}{d x} e^{\\cos{\\left (x \\right )}}$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAADwAAAAeCAYAAABwmH1PAAAABHNCSVQICAgIfAhkiAAAAtRJREFU\nWIXt2EtoVFccx/FPXm2C2lopqamtrUYthZIYRanEutDaSkFc6CIY8EGxCw0lSA1upNiVutCNm4Bt\nETdu7K7QFARtxWpBbO2iNhARFFQUArE+iK8uzhlyE5zba2aSMTJfGOY8/nPu73/u+Z9z/kOZvHRi\nAI2lFjJeNOJyqUUUSuUz2H6Gn8dKyCiZl9GuBbVQnWJUja9xBTVow4FC1CVYgvW4gHfwK3qwDMvR\nh9k4iRN4A+1RSxVWYQtmojeO2Yq5aMY5TMKn+Ap/4hP8lCbqkBC3MA0PMbUwP0EDruHNWO/Crij2\nTMKuAucxJ4r+PNH3BZbGseCVRP8anI3lw5gey21poprwL+pifTl+y+jQ/9GREJTkG3w3ou0oduN9\nXMXv2I+3hBVSFe1q8VIs78HOp4y/gfwx/DFO4V6srxDi97VUV7JRmee5UwxNcI4awZEHmIUdsXwC\ndzA52t3HYCyvxPFYfjUx1qAUNuP7WJ6Mi0J8daT9KCNv46bgQI42LMBfhiajUojPD4S9pDlhf0yI\n32Wxvhrb8a4wITWx/cv4PSVnW5FHVC0OCjNVhxnR9hx+zODUfGxFf3z469iG27G/VYjD03givLFe\nYWP5ENeFZXsyauiKOvri92N8i4+EDW8zFuKf2P8Id/EDbuC92DcmbBJ2xRmJti5hM3nhWCIsqdZE\n22JhVdSXRNEI8i3p0dIjHPKH49hV+FvYbQeK/KySUyOc1d2lFpJG7qb1pAhjNQhvtK8IY40ZuSOg\nogifW8Kyfdp1tQHrxsqJUrIPvxi+NyzCEcW5tBRM2qbVKVz3WmRfptXYKxxJV/CycP51C/H9XPNC\n5L8jScuHn8f8t2CqR5Tz5b9pueal8RJbbPLlv1lyzQlHWv6bJdecMORiOC3/zZJrThhyDvcLf7sQ\n8t+1gmPthueaTfgj2m0cN5VFJHcOp+W/9dJzzTJlypQZN/4DrfSMusuKD5YAAAAASUVORK5CYII=\n",
       "prompt_number": 62,
       "text": [
        "d \u239b cos(x)\u239e\n",
        "\u2500\u2500\u239d\u212f      \u23a0\n",
        "dx         "
       ]
      }
     ],
     "prompt_number": 62
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "d.doit()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$- e^{\\cos{\\left (x \\right )}} \\sin{\\left (x \\right )}$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAAGgAAAAUCAYAAABh/HgbAAAABHNCSVQICAgIfAhkiAAAA+ZJREFU\naIHt2FuIVVUYB/Cfc1WmGkutTKec8pJdvGakdncMCaKMIgWhqWSCjB7MrJDKfEqpoILAl1J6MaQo\nIQjCmC7YlewiRNFAoFB2YaJItCnt4VuHs8/pTIzHPaMD5/+y1/rWWvv79vrumxpOaNQPIa/5eBAT\ncTMa0ZPWrsQdaMNSjMD3OAN3pzMzsAavYSp+xUIswu0Yl3iswyeYhN/wdxWyXo3P0IcPqjg/7DAe\nP+CsNF+LR9J4Cj7M7B2B3ZgsFHJXZq1LKLYDp2TWbsRHabwVZ6IOS6qUdzmOYHOV54cd7lW8wHJs\nwAtltG14HNOxDx/jaeFJlwuFj0RT2v8EHqrw7mXHIPNkNBzD+VxQN4R8+uN1MkaV0RrF5fehHQ+k\ncTfOw084iL/S/sXYmcatmfc0qR7fqS48Dku04Wdx2QUUrHsOvlJUYB2+xUV4DDMzZ14R4awVN2C1\nyDV9QqlwXwUeR4NmTBOeOquK87liRM7vm4V70CsubCxW4Q+R0LuwS8T3bqEIuA6X4UcRxt4RHrFW\neFdPeh7G67hAeNJcfJPW/sEBvIr9wjNn490Kci4VBUWvUMhYcRerhGE8lWTais7MmQ0ivD4j8uY1\naME83K+0oKgXnv1mms/FivTtk7BSFECjMUEYY4Pw2h6DgE58kZgVsFZYfN64YgB7pvVDn463y2jL\nsKWM9mkF2hhhbG8oLV6eFVVnFstxUhpPwXOKDrFFGOcCYbiHhYKJajZ3zBdhZmGGdqn4kNMHg+Ex\n4DbsER5WQIvwmiy6/VdBhCK+Vhp9uoRnjMvQVmfGzyceBWxXLJra8KRQPmF8swsbs1XKzCTQQMPe\nbkVtrxfh4iYRCurTRyzH7wN831DhPWE0+7BDVIjbFC14IPhcKKSAQrHSInJtS9n6RvyZmS9QVP5e\n0U4UsEf0ibuPQp7/RaOIm8OpZ2gX8u4VF3lQGFMW3fr3oHJ6p2JuIcL8yn54T097O/pZb8DDhUke\nZfYY4TGDktgGATNwSCToNpyNl4XCmnPi0auYf8qxSHjcrgzt3My4VfwlQT4K+kWEsUpN3XjckgOP\nPDFHafm9F3eKRD06Jx4HFO92FDbh4jRfjC/THmlfNsTNlPmzkoeCCuFtidL8NS8JtrPSoeOMNUoT\n+kRRVe3P0BpVNrpK9MayJ9FMj8T1id+FOF94y6HMvnV4KTNvFwpEfn1Qg0iEE4RFNov+ZLMTrxtf\ngXNwmsg9R4TnbBSyXyWqqktEZfq+aIo78KjwwD5RXNwqeqIOnCry04uiX2rCtaJc36QYttaLqq7w\nJ2QH3kprU0U/N1zSRQ011FBDDTXUcLzwLzXvxojZqoXsAAAAAElFTkSuQmCC\n",
       "prompt_number": 63,
       "text": [
        "  cos(x)       \n",
        "-\u212f      \u22c5sin(x)"
       ]
      }
     ],
     "prompt_number": 63
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Integrals\n",
      "a, b, x, y = sympy.symbols(\"a, b, x, y\")\n",
      "f = sympy.Function(\"f\")(x)\n",
      "sympy.integrate(f, (x, a, b))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\int_{a}^{b} f{\\left (x \\right )}\\, dx$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAAFcAAAA7CAYAAAAO/hZNAAAABHNCSVQICAgIfAhkiAAABSFJREFU\neJzt3FnIVVUUwPFfapZaZGVKg2mmDUR+SqWVWQ5JA9FDPUXzRBRWZEWBUBEEFdpAJT0ETUQP1UNS\nEY0WUUk2miVNkhiSldqkZYM9rHO5x5t+95zjPd7P+53/yz5ne/da6+xv77X3WWsfqdjuOA8rMbnd\nhnQig/Ajdmy3Ie2kT0lyp+BN/FWS/O2CviXJnYldxB/vSizH9yXp6miuwmp8gIOTus8wMbk+DfPb\nYNd2z1T8jWPxJd7Cfvgi9ZtL8M62N639bK3PvQMv4cNE1gocKTq5xgy8uJV6eh0TsRHnN9TPwF3J\n9Rh8LvxvRQ7uF507rKG+D+biAszDPtvWrM5gOZa024ieTFGfOwbDbepbKxoo2rnTknJhqwzpRIp2\n7tSkfL9VhlTUWYk/9PLYQRkcJHYJi9ptSE+niFs4Pik/aqUhncjWdO4nrTSkEynSucck5eJWGlLB\nXsLfbkyuK7oh78itjdpV+KHFttQYjedxJx5UXkA/C3NFtO8XnFK2stvFqH2lJPn98TUuwmMinLl7\nSbqycgX+KWJHv5y/Pzopy1rMTsIovIFP8TjWlKQrK0eJ5y3Vjr74TYzcC0rSMVd57qYoy3B3kYZ5\n/NkhIqsLHxdRloEJeK8k2UUYgZFYUKRxHrdwVFL+LXJkreRRERc+DktF5mIZLhczJp3NOALniBk0\nUqSRLsNg7Iubhd8+OLH16xx2TBM+9hsxkJbgX5HJrpFVfy4eSASWNWpHJfLPaKg/Sz2TMQb3YYfk\n/hGRrzsWk0RHXJtqe2EO/ReLsxYjk/u98atIvNbIqz8zC8XDP1ykcQbOSOSPaqiflbqep+6a4Cn1\nsOdwzMGeqX+fjPEZdHeJMxbnNNSvUE9ZFdGfib5YJx5+Zt7GGbkVP6uPCuJBrkndj2ho8x1u60bm\n7mJENuM5sRtIR/lGiuc9vaj+rAvaIRiQXJcVDRsngkEbU3WDxdSs8W3q+lCRn3u9G5m/YmgTvYNx\nsship08ITfF/f5tLf9bOHZeUfykvGta1GdlrbDlzPB0b8HaqrtGl7IafmugdLWZm49mKE8T6snYz\ncjPpz9q5XUm5WATJW80e2N//F8t16jYOEK/Ehyf3M8Tmfl1y3wfXNbTvwrtNdP+clMtTdTuJzquN\nyllF9GfditUElpUzqy06m9uJrMLOOFUY/4GYQaPUOwZmize6NAfgtSa6vxIzpjbq+opjA4PETmCo\neLHJrT+9eHTHCrGHu1BsP1rN9cK4IWJvmqa/2H8uEiOnNs1vEav3H2J6zsfLqXYHiZhAlj3naNwj\ngjT9ErnjxR52GW4Ua0Ee/ZkYrB5mPDRv44w8iWdKkt2jmSQ69ifZR3oWblD/S38lXhY6iiwL2mFJ\n+ZZNt0lby7liOo0VPuzpFsruEeTp3De7/VV+5ohN+GycqZeeQl8gRuzEJr+rKMBq/K46ANJyRohR\n22yvWLEZmvncI5Kyu/f3ii3QrHMnJOWrZRvSG1kg0sp5E5kVTRiA9Xrpm1Mr6M4tTBMBk2e3kS0d\nzb0ihNY/uX9CxFMHts2iDmKJiCANEPmgP3FTWy3azkl/+zteBJYXi1T3BvFp/z9tsKvjGCLySOvw\ngvjMdEv0EwnFS8W3v8/hwLIN7C08hKuT62FiV7Fz+8zpHMaKM2O1bPAMBSLwvYEiZ19PFLHd9cn9\ndNG57T7q2eMo0rlrxadSsKs4KfMGzm6VUZ1Ckf8pZKnIhA4UqevlIhO6RKRrKioqKioqtjn/AVls\nEZFnejcDAAAAAElFTkSuQmCC\n",
       "prompt_number": 65,
       "text": [
        "b        \n",
        "\u2320        \n",
        "\u23ae f(x) dx\n",
        "\u2321        \n",
        "a        "
       ]
      }
     ],
     "prompt_number": 65
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sympy.integrate(sympy.sin(x))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$- \\cos{\\left (x \\right )}$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAAD4AAAANCAYAAADxL91HAAAABHNCSVQICAgIfAhkiAAAAmFJREFU\nSInt1Vuoz1kUB/DPYXKXuwwdB7k+YDjFIOXSKSlJHhAPOEpMUxgP8zJIUcelMSmlFPGg4Y2UUrxI\niNzmhVLk1hEZlFzneFj7N2f379/pX/4Pim/92uu292+ttddam28UNVU86ydswr94i3Y4gCuZzWT8\nimb8gJ7YjtuZzQJMwQt0RN/k5y9J3x4NOJ34eixDC4ZgFVanswdhM+5iFD4mumqYileYkckO437G\nzxMB9stkY3APEzL+bMnZi3Eo45egW6JHYK/WCzyEO8mfafgPv2V7V1QSTKWoEQGdKpH/iWOJ7oZn\nWFdm/1+4nuhF+AfdM31X7M74DRm9L+kLHMelRNdiF/pk+ulak/w/xuNacqKS72Da97Mos61lgiqw\nKNnMKaNbm3T1GIineIkjoi3yCumK9RlfV3LWI2xrw49eaCT6rMANZbJRAYak9WEbNsPS+rGM7kNa\nh+OqmAO/Y67o3Z2iRI+Kvn2d7c1baYxI3Lk2/HiN/sQA+lI8TmuvNmyepLV/GV1Ris0Yh3diONVi\nMP7GfjHoXmjt71LMxntcyGTDSmx64DnVCfyCuO1ZZXQLMAAn8UZM1lLUp/3nMVEMswIPsFIMqZ7p\njMLnztiBsYlvwM1kI9ltLPnXeFysLKzK0CCesPmZrJ8YPgWWigB/zGRDxdCbmfjlooLyvq7D5Yxf\nhk5YKBKyGKNxSySvwB/iWczRWBDVfMcnYYt4x5+Ikm0Sg6rAdKxJNp/QBXuS00RQdegtEtkibrpJ\n3D50ENV1Rdz48yTfIhL9VpT8CZzJ/j0y/bOq7/h3fMdXjs/pp4GcT53tkgAAAABJRU5ErkJggg==\n",
       "prompt_number": 66,
       "text": [
        "-cos(x)"
       ]
      }
     ],
     "prompt_number": 66
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from sympy import oo\n",
      "sympy.integrate(sympy.exp(-x**2), (x, 0, oo))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\frac{\\sqrt{\\pi}}{2}$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAADMAAAAaCAYAAAAaAmTUAAAABHNCSVQICAgIfAhkiAAAAlxJREFU\nWIXt11uITVEcx/HPGBoMQ+4hJk2iUKbME1MUJS/iRZrmQYnwMCVSUnJJPLg8jAeRXEIRSggPolyi\nNPKEBxOlCKOQS7k8rH3qnG2fc/acOWZS861Va/32+v/Xf+291n+tTS/dwpLuGuh3GUsSU3Cxs0H1\n6awBpmMFKspUkliO0zGtAedxFU9wBONKiD+HPejXVSdFeIQBWe16XMfQqD0It/EWtaUOMhWrSjVO\nSQNOxLTLqItpM4VleqbUgXajqlTjlBzAwpj2GS8xKqZ34F2m0Zk9U4dX+F5CgGmpxFzciOkvMBrV\nMf273OWYml0FDAfjFL7Kn7V+YU6RMeajNUGvxpiYNjbyezMj9I11GIbheB7Ta/EmCjZOBY7hMRYL\n58NDtKMFB/ED33C38Fwsx+EE/UtUslknvKDNSY5m4Ki/UyLsFDJIEs1y1/hZYbnApTw2SfRHm/zp\nOptJ+IQd+TpUCqmvQ27+Ho8NKQMaigtRfSDup7SDpcJSLkZV5HdvGqetwpfIsB01KQNai41RvR53\nUtrBOUxL0e8EtqV1Olk4jPoLm25TJwJqw6yovghPU9oNwYMU/bZiS0xrzlSSUvMzYQM3YTUOpQyo\nEROF05vwNScIL6UYS4WrSiGahHi3x/TZmUo8m2XYLyy34/iQIhhYL5wPP6P2a2Ei83CliO0yrCzw\nvBH7cA0ns/S+8l9Wc7iHkWk6RrRjQVa7Rji1FxWxG4NbRfq8l//8in+pHqUFa3o6iHJxByPK4aiU\n/5lyUoePsi6LXaGnJ5P0E/bfckn+a1IvvfTyj/kDQwKAnZfGXhgAAAAASUVORK5CYII=\n",
       "prompt_number": 68,
       "text": [
        "  ___\n",
        "\u2572\u2571 \u03c0 \n",
        "\u2500\u2500\u2500\u2500\u2500\n",
        "  2  "
       ]
      }
     ],
     "prompt_number": 68
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Series\n",
      "sympy.series(f, x)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$f{\\left (0 \\right )} + x \\left. \\frac{d}{d x} f{\\left (x \\right )} \\right|_{\\substack{ x=0 }} + \\frac{x^{2}}{2} \\left. \\frac{d^{2}}{d x^{2}}  f{\\left (x \\right )} \\right|_{\\substack{ x=0 }} + \\frac{x^{3}}{6} \\left. \\frac{d^{3}}{d x^{3}}  f{\\left (x \\right )} \\right|_{\\substack{ x=0 }} + \\frac{x^{4}}{24} \\left. \\frac{d^{4}}{d x^{4}}  f{\\left (x \\right )} \\right|_{\\substack{ x=0 }} + \\frac{x^{5}}{120} \\left. \\frac{d^{5}}{d x^{5}}  f{\\left (x \\right )} \\right|_{\\substack{ x=0 }} + \\mathcal{O}\\left(x^{6}\\right)$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 70,
       "text": [
        "                             \u239b  2      \u239e\u2502         \u239b  3      \u239e\u2502         \u239b  4   \n",
        "                           2 \u239c d       \u239f\u2502       3 \u239c d       \u239f\u2502       4 \u239c d    \n",
        "                          x \u22c5\u239c\u2500\u2500\u2500(f(x))\u239f\u2502      x \u22c5\u239c\u2500\u2500\u2500(f(x))\u239f\u2502      x \u22c5\u239c\u2500\u2500\u2500(f(\n",
        "                             \u239c  2      \u239f\u2502         \u239c  3      \u239f\u2502         \u239c  4   \n",
        "         \u239bd       \u239e\u2502         \u239ddx       \u23a0\u2502x=0      \u239ddx       \u23a0\u2502x=0      \u239ddx    \n",
        "f(0) + x\u22c5\u239c\u2500\u2500(f(x))\u239f\u2502    + \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 + \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 + \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n",
        "         \u239ddx      \u23a0\u2502x=0           2                    6                    24\n",
        "\n",
        "   \u239e\u2502         \u239b  5      \u239e\u2502           \n",
        "   \u239f\u2502       5 \u239c d       \u239f\u2502           \n",
        "x))\u239f\u2502      x \u22c5\u239c\u2500\u2500\u2500(f(x))\u239f\u2502           \n",
        "   \u239f\u2502         \u239c  5      \u239f\u2502           \n",
        "   \u23a0\u2502x=0      \u239ddx       \u23a0\u2502x=0    \u239b 6\u239e\n",
        "\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 + \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 + O\u239dx \u23a0\n",
        "                  120                "
       ]
      }
     ],
     "prompt_number": 70
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "x0 = sympy.Symbol(\"{x_0}\")\n",
      "f.series(x, x0, n=2)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$f{\\left ({x_{0}} \\right )} + x \\left. \\frac{d}{d \\xi_{1}} f{\\left (\\xi_{1} \\right )} \\right|_{\\substack{ \\xi_{1}=x + {x_{0}} }} + \\mathcal{O}\\left(x^{2}\\right)$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 73,
       "text": [
        "             \u239b d        \u239e\u2502                \u239b 2\u239e\n",
        "f({x_0}) + x\u22c5\u239c\u2500\u2500\u2500(f(\u03be\u2081))\u239f\u2502             + O\u239dx \u23a0\n",
        "             \u239dd\u03be\u2081       \u23a0\u2502\u03be\u2081=x + {x_0}        "
       ]
      }
     ],
     "prompt_number": 73
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "f.series(x, x0, n=2).removeO()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$x \\left. \\frac{d}{d \\xi_{1}} f{\\left (\\xi_{1} \\right )} \\right|_{\\substack{ \\xi_{1}=x + {x_{0}} }} + f{\\left ({x_{0}} \\right )}$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 76,
       "text": [
        "  \u239b d        \u239e\u2502                       \n",
        "x\u22c5\u239c\u2500\u2500\u2500(f(\u03be\u2081))\u239f\u2502             + f({x_0})\n",
        "  \u239dd\u03be\u2081       \u23a0\u2502\u03be\u2081=x + {x_0}           "
       ]
      }
     ],
     "prompt_number": 76
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# limits\n",
      "sympy.limit(sympy.sin(x) / x, x, 0)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$1$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAAAsAAAASCAYAAACNdSR1AAAABHNCSVQICAgIfAhkiAAAAF5JREFU\nKJFjYKAC4GJgYLhEjEJTBgaG0wwMDP/RJViQ2JoMDAw9DAwMrxkYGP6S4owF2ExmIsWEUcVUV8wB\npblwaRRjYGDYycDAcIUBEnv/GSBRv5+BgSGaFBfQGAAA/84M5lOscPUAAAAASUVORK5CYII=\n",
       "prompt_number": 77,
       "text": [
        "1"
       ]
      }
     ],
     "prompt_number": 77
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Sums and Products\n",
      "n = sympy.symbols(\"n\", integer=True)\n",
      "x = sympy.Sum(1/(n**2), (n, 1, oo))\n",
      "x"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\sum_{n=1}^{\\infty} \\frac{1}{n^{2}}$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAADAAAAA4CAYAAAC7UXvqAAAABHNCSVQICAgIfAhkiAAAA45JREFU\naIHt2kmIHHUUx/FPTyaGjMlEJwpxJRFBFBdIJBE8SEg0HgyEiCQQUZDRBDfcUbwoCcTt4EHRgx4M\nIgoKHkRBQfCg4oKg4oIibihEotnURCZmPLwaqjKp7q7qrup2oL9Q0F3L7733r3+9evWqmOE0Sux7\nArZjMXbiYXyebDsb12Mv9uNp/F2ZlxXxOI5Lfm/AHqzHpSKw4WTbMdjSc+/acBZWTFu3TozyCzn7\nr8Pcup2CoYL7HevoKfEqPhZn4Mwc3Z4EUJRZuCPzv4FtuBxP4juckWybh629cqzMRXw+rsRhcUG/\niHeTbTeIef87duEu/FKdmwMGDCjD15hMln/xZ4HlAA5ljmu1PFp3AFdnjB0Q2acoDSzAEnHjG8cT\n+DGj+QdGKvQ3l+cyBr+swOAQVuPNRHNzl3ptmYdvpEE8W6H2TfisQr2mLMU/0iA2Vqj9IFZVqNeU\n26UB7JWWC90yR1xrtdPA69IgPsDsXhiukhPxq96lwfl4GadXKbpK3BMmRTG3pkrxDON4ILGzuGrx\n7dKzsBOLqjaQoZYAhvG+NIi3lCvHy1BLABLRPdIg7qvDiBoDIB7opwKYwEU12Kg1AHhGGsT3GK1Y\nv/YARvBVYugLfQxgVocGJrAQ52AlfutQZzqbcCMuxEki031YkfYRXCZKi+V1iNfNudgtunIzjkXi\n4eTOfjvSCSNiPj7Vb0eyFL2TDokCay6uEHVRt0xWoFGYx/CpqBSroCESQTuGcAvuSZaO2CLahKd2\nKpDDRlF5tmMtTkt+v4JlZQ2tEbXP0rIHtmCZGJAiN7/bpCP/iGjbF+Y80QJZW+agFhyP+/EXni94\nzBzptH0DJxc1NpUuby3h4HSGxSBcIzrZB6X10+qSWhfj3rwNeVloBO/gAnxS0EBDPCvPTo4fEw2u\nPP2fRZ1zuKD2qBjIbQX3t0OxFmGnS2FHEjZLB6fsmes7G7BPvDTZLcqYI6jrkbAIY7gWl+Ah8ap2\ngUibM6JUGRfT4ltp129UZKkZwXycgp8y61biozIiRV+zdktes2q/uCjfzqy7Ci9pnsH6Qqtm1Q5x\nnyAc3iVKlv/lNZAXwHvi0XGK13Cdo78KaMrUaSqaEcZwt9an95Bon0/kBLAEPxR1rgy9yAi1tkoq\nyQhtqK3fSWSE9ZpnhH2JAwvFZwSdTKHaqTsj1N5t6zojNGGTaARMirL65i71BgwYkOE/ejLrX3dA\nFFkAAAAASUVORK5CYII=\n",
       "prompt_number": 78,
       "text": [
        "  \u221e     \n",
        " ____   \n",
        " \u2572      \n",
        "  \u2572   1 \n",
        "   \u2572  \u2500\u2500\n",
        "   \u2571   2\n",
        "  \u2571   n \n",
        " \u2571      \n",
        " \u203e\u203e\u203e\u203e   \n",
        "n = 1   "
       ]
      }
     ],
     "prompt_number": 78
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "x.doit()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\frac{\\pi^{2}}{6}$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAACsAAAAcCAYAAAD4IkbVAAAABHNCSVQICAgIfAhkiAAAAmVJREFU\nWIXt1luITVEcx/HPcSdmJpGRGkISRV7cGxIJL6IUyoNb8qTIK6GUB/HoSRFCuY1SPChyeUJyeVGu\nT2iIwrgMD/992HPmHM6ZfZDMt3Z7r//ea63fXuv3/+/NP0Sug/0mYSpqMQ3bcalaoqpJX+xMtZfg\nHYb8HTk/ZxxaMSJp1+CrEF0Ji6opqhQ5YYO8hcYKsRMqGGM0TnVk4qwcxHNsrKDPNtzF0YL4KGzF\ne7Qk5614m1UkrMQulb/0DfQuiI3BE5G4UI+HQizo0iGJwfzkvBk9MazMfhPFqr5PxbrhJHbjahLr\nLpL5VQaNoBGrxNvXYyGmlNl3L+YVxFbiI+qyCitkON6IpEofNWX07YrbYiXTXMC9X3VO26AfDovt\nKRSSP1pFPa0RPk0fb8oQOwuX8TkVy2E6Xogd24E9oloUrTA5nMAWzMU+rMZsnBX+nJ0MmsXn+8UX\nL80AsRD3sS4VnymqwNjCQVZo66PjYsugKYO4NL1wS/vKMUiI/aB9hXgmFgs/vHMg9UBdEv+CPhhY\nJbELcC4RlqY5OT/QtkLkxc4R1aal2JYux7XkerQQXQ2W4lCR+Cfh1+Yi91rQA/0p7r81uJhcDxae\nykotGnCnxP3riu9gTyH4Be3FNmKo+MIQWd8g/JaFxSKBS3EkmTft2ZzY2TPaVo/vnMaxVHuG8Nj8\nYg9XwPlETCm6COttSsWWiBUdlg8UFufxWJtq38RT2X546sV2Pv7JM60iAXeLSvQpmXMyHmWYu2I2\nYP2fnDALV1QnSTN9jcphJF7jZTUG+91il4lM/ydoEv+knXTyX/INgS10OwCFv2gAAAAASUVORK5C\nYII=\n",
       "prompt_number": 79,
       "text": [
        " 2\n",
        "\u03c0 \n",
        "\u2500\u2500\n",
        "6 "
       ]
      }
     ],
     "prompt_number": 79
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "x = sympy.Product(n, (n, 1, 7))\n",
      "x"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\prod_{n=1}^{7} n$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAACwAAAA8CAYAAAAdUliaAAAABHNCSVQICAgIfAhkiAAAApFJREFU\naIHt2k2ITXEYx/HPeBmlBlGTd4NMkYgFJdFgYVZKTUSN0iytvGSWLMiCslCshPJWVsgS5WVBKS8r\nUpqEvEQjlJfG4n9uc+bO3Ole5xxnpjnf+tfp/9zn//zu6bnPef7/exghvMaXsnEyV0WDMBW7MR9z\n0SSInZKjpkGZpq+4bViVk5aamYEDeYuohdNCWgwLGtH1v4OOSuDbik9pCamWJIIX43taQqolieBu\nPE9LSEHBSOcVejIaB7IQ3IgVOFUW7AgmVTnifl3YgQUYn4XgOHf8292JC16flphq6vDLFOKksQaS\nPThyoRCcNYXgrCkEZ00hOGsKwVkzJuf4m7ABS4VubjLaIttqHMaNWhc9I3m31jSAvR7Ho+uHuIs9\nqIvmOg1w7pFnSqwVRNZhHt7hmPAFRfP9DhjzTIlnwjHtEiEVjpfZl+JxuVOed/gtfqBFOJB5ELON\nxUZcK3caClWiBffwMzbXigm4iNGYUzLkLXg01uBW2Xx7NPdKqCLLS4a8BS8TNqy3y+abcVX4jW3B\n9ZIh7zo8HU+FshbnkFCXF+EoftWy6AW99fRwlT71+tbh5loCJmEq3sQCP0VDFX7t+go+mJXAEp04\nj8/6n9y8xznsL/NpEmrpTfwZwO8RTmBdEmGVcrgeH3B2EN9xFdZ6Eo1K1FcnraCgYETRgCuYnbeQ\naugQdiqVdh5DllQEl4r9ZKHZWCv8LbAQEzFL2GeJfW6f3n3XQPwWHsU1NSy10iF0+S+wNZqbgG8p\nxkg1JRqEdx/iu9QW/du+JKSaEl+xWWhcSrThspAa3VHAKdhrCKQEoQNrj67r8BEz9c3hJKReJe4L\n7/OUuI6dWJlw3e3CS0w9uIRdCdcrKBjW/AWx8aB90GZNCgAAAABJRU5ErkJggg==\n",
       "prompt_number": 80,
       "text": [
        "  7    \n",
        "\u252c\u2500\u2500\u2500\u252c  \n",
        "\u2502   \u2502 n\n",
        "\u2502   \u2502  \n",
        "n = 1  "
       ]
      }
     ],
     "prompt_number": 80
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "x.doit()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$5040$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAACoAAAASCAYAAAAt6kybAAAABHNCSVQICAgIfAhkiAAAAg5JREFU\nSInt1k2ITlEYB/DffJhZYDBNMQtRY4ZszCRlIxulbJTVlLFTkiJlYaaU1ISFsh4bDcVCInuEbEcN\nmynlO8xGmHz1Gotzbu57uu/tvtiIf93OPc99nv/5n/d5znNe/hK0JfNTmItPKwawF0/wPue3Fuew\nGduxG/djXBmOYCvuJfam+eaTp4Zjic8SvMBIzjaGh+goEbkqLnz8T/A9xQSu4Qw2FPiM4y3ac7Zu\nfMP+EqETwuZTob/Ed7tkoQwzuFFgn8bNBjG7MNxAaCW+1grC8liMfjwr+PYKGwvsi7ADl3+Hrz35\n2IFR9OA7+nBU2DWhzqg/WBnm0IVOfMnZR3GywL8pvlToclzE8zgfwV2hVl/HQPjagBiW4k18H8RH\nPG4gtDJfmvqBnEi4JKRnLM5rcZwvIF4Qx6zlteKwcCgboTJfKrRWMJ/FzjifLVl0YRw/xHEfziv+\ntTJU5ssLvSOkOUWbUBKElM5jWQPid5F4BdbjVomQZvjqDtOQ4lrqEforoW6msLLAbw0exPdtWCf0\n4wxZKoeF2p3E1Yp8dbgSReUxJOw4fzudwEu05Gx90e9AEXHEasV9tGm+TbggtAMxcFK4cztzfr1C\nSvbkbGfxSPkV2h8XH0/slfhakqAtOIhPQuuYjsSfE7/BaJ8RukI3DqnvGBm6cF3449Er9NgpnPaz\nNJrh+49/Cz8AusqOkTOUhAUAAAAASUVORK5CYII=\n",
       "prompt_number": 81,
       "text": [
        "5040"
       ]
      }
     ],
     "prompt_number": 81
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Equations\n",
      "x = sympy.Symbol(\"x\")\n",
      "sympy.solve(x**2 + 2*x -3)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\begin{bmatrix}-3, & 1\\end{bmatrix}$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 83,
       "text": [
        "[-3, 1]"
       ]
      }
     ],
     "prompt_number": 83
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Linear Algebra\n",
      "sympy.Matrix([[1, 2], [3, 4]])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\left[\\begin{matrix}1 & 2\\\\3 & 4\\end{matrix}\\right]$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 87,
       "text": [
        "\u23a11  2\u23a4\n",
        "\u23a2    \u23a5\n",
        "\u23a33  4\u23a6"
       ]
      }
     ],
     "prompt_number": 87
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sympy.Matrix(3, 4, lambda m,n: 10 * m + n)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\left[\\begin{matrix}0 & 1 & 2 & 3\\\\10 & 11 & 12 & 13\\\\20 & 21 & 22 & 23\\end{matrix}\\right]$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 89,
       "text": [
        "\u23a10   1   2   3 \u23a4\n",
        "\u23a2              \u23a5\n",
        "\u23a210  11  12  13\u23a5\n",
        "\u23a2              \u23a5\n",
        "\u23a320  21  22  23\u23a6"
       ]
      }
     ],
     "prompt_number": 89
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "a, b, c, d = sympy.symbols(\"a, b, c, d\")\n",
      "M = sympy.Matrix([[a, b], [c, d]])\n",
      "M"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\left[\\begin{matrix}a & b\\\\c & d\\end{matrix}\\right]$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 92,
       "text": [
        "\u23a1a  b\u23a4\n",
        "\u23a2    \u23a5\n",
        "\u23a3c  d\u23a6"
       ]
      }
     ],
     "prompt_number": 92
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "M * M"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\left[\\begin{matrix}a^{2} + b c & a b + b d\\\\a c + c d & b c + d^{2}\\end{matrix}\\right]$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 94,
       "text": [
        "\u23a1 2                  \u23a4\n",
        "\u23a2a  + b\u22c5c   a\u22c5b + b\u22c5d\u23a5\n",
        "\u23a2                    \u23a5\n",
        "\u23a2                  2 \u23a5\n",
        "\u23a3a\u22c5c + c\u22c5d  b\u22c5c + d  \u23a6"
       ]
      }
     ],
     "prompt_number": 94
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# solve Mx=b\n",
      "p, q = sympy.symbols(\"p, q\")\n",
      "M = sympy.Matrix([[1, p], [q, 1]])\n",
      "M"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\left[\\begin{matrix}1 & p\\\\q & 1\\end{matrix}\\right]$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 96,
       "text": [
        "\u23a11  p\u23a4\n",
        "\u23a2    \u23a5\n",
        "\u23a3q  1\u23a6"
       ]
      }
     ],
     "prompt_number": 96
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "b = sympy.Matrix(sympy.symbols(\"b_1, b_2\"))\n",
      "b"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\left[\\begin{matrix}b_{1}\\\\b_{2}\\end{matrix}\\right]$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 98,
       "text": [
        "\u23a1b\u2081\u23a4\n",
        "\u23a2  \u23a5\n",
        "\u23a3b\u2082\u23a6"
       ]
      }
     ],
     "prompt_number": 98
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "x = M.LUsolve(b)\n",
      "x"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\left[\\begin{matrix}b_{1} - \\frac{p \\left(- b_{1} q + b_{2}\\right)}{- p q + 1}\\\\\\frac{- b_{1} q + b_{2}}{- p q + 1}\\end{matrix}\\right]$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 100,
       "text": [
        "\u23a1     p\u22c5(-b\u2081\u22c5q + b\u2082)\u23a4\n",
        "\u23a2b\u2081 - \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u23a5\n",
        "\u23a2        -p\u22c5q + 1   \u23a5\n",
        "\u23a2                   \u23a5\n",
        "\u23a2    -b\u2081\u22c5q + b\u2082     \u23a5\n",
        "\u23a2    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500     \u23a5\n",
        "\u23a3     -p\u22c5q + 1      \u23a6"
       ]
      }
     ],
     "prompt_number": 100
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Ch4. Plotting and Visualization\n",
      "\n",
      "Some libraries for visulation:\n",
      "* [Matplotlib](): most popular and basic library for python visualization\n",
      "* [Bokeh]() and [Plotly](): interative and web visualization\n",
      "* [Seaborn](): high-level plotting library, tragets statistical data analysis and is based on Matplotlib\n",
      "* [Mayavi]() and [VisPy](): high-quality 3D visualization"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "%matplotlib inline\n",
      "import matplotlib.pyplot as plt\n",
      "import numpy as np\n",
      "\n",
      "x = np.linspace(-5, 2, 100)\n",
      "y1 = x**3 + 5*x**2 + 10\n",
      "y2 = 3*x**2 + 10*x\n",
      "y3 = 6*x + 10\n",
      "\n",
      "fig, ax = plt.subplots()\n",
      "ax.plot(x, y1, color='blue', label='y(x)')\n",
      "ax.plot(x, y2, color='red', label=\"y'(x)\")\n",
      "ax.plot(x, y3, color='green', label=\"y''(x)\")\n",
      "ax.set_xlabel(\"x\")\n",
      "ax.set_ylabel(\"y\")\n",
      "ax.legend()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 1,
       "text": [
        "<matplotlib.legend.Legend at 0x7f2728636850>"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\nkt5pAAAAAElFTkSuQmCC\n",
       "text": [
        "<matplotlib.figure.Figure at 0x7f27293e38d0>"
       ]
      }
     ],
     "prompt_number": 1
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Ch5. Equation Solving\n",
      "[Numpy Tutorial](http://docs.scipy.org/doc/numpy/reference/)\n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from scipy import linalg as la\n",
      "from scipy import optimize\n",
      "import sympy\n",
      "sympy.init_printing()\n",
      "from __future__ import division\n",
      "\n",
      "A = sympy.Matrix([[2, 3], [5, 4]])\n",
      "b = sympy.Matrix([4, 3])\n",
      "print A.rank()\n",
      "print A.condition_number()\n",
      "print A.norm"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "2\n",
        "sqrt(2*sqrt(170) + 27)/sqrt(-2*sqrt(170) + 27)\n",
        "<bound method MutableDenseMatrix.norm of Matrix([\n",
        "[2, 3],\n",
        "[5, 4]])>\n"
       ]
      }
     ],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "L, U, _ = A.LUdecomposition()\n",
      "L * U"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\left[\\begin{matrix}2 & 3\\\\5 & 4\\end{matrix}\\right]$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 5,
       "text": [
        "\u23a12  3\u23a4\n",
        "\u23a2    \u23a5\n",
        "\u23a35  4\u23a6"
       ]
      }
     ],
     "prompt_number": 5
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "x = A.solve(b)\n",
      "x"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\left[\\begin{matrix}-1\\\\2\\end{matrix}\\right]$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 7,
       "text": [
        "\u23a1-1\u23a4\n",
        "\u23a2  \u23a5\n",
        "\u23a32 \u23a6"
       ]
      }
     ],
     "prompt_number": 7
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "x, a, b, c = sympy.symbols(\"x, a, b, c\")\n",
      "sympy.solve(a + b*x +c*x**2, x)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\begin{bmatrix}\\frac{1}{2 c} \\left(- b + \\sqrt{- 4 a c + b^{2}}\\right), & - \\frac{1}{2 c} \\left(b + \\sqrt{- 4 a c + b^{2}}\\right)\\end{bmatrix}$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 9,
       "text": [
        "\u23a1        _____________   \u239b       _____________\u239e \u23a4\n",
        "\u23a2       \u2571           2    \u239c      \u2571           2 \u239f \u23a5\n",
        "\u23a2-b + \u2572\u2571  -4\u22c5a\u22c5c + b    -\u239db + \u2572\u2571  -4\u22c5a\u22c5c + b  \u23a0 \u23a5\n",
        "\u23a2\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500, \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u23a5\n",
        "\u23a3         2\u22c5c                     2\u22c5c           \u23a6"
       ]
      }
     ],
     "prompt_number": 9
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "optimize.bisect(lambda x: np.exp(x) - 2, -2, 2)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$0.693147180559$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "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\nnFLWJJwYdJ0AAAAASUVORK5CYII=\n",
       "prompt_number": 10,
       "text": [
        "0.693147180559"
       ]
      }
     ],
     "prompt_number": 10
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "x_root_guess = 2\n",
      "f = lambda x: np.exp(x) - 2\n",
      "fprime = lambda x: np.exp(x)\n",
      "optimize.newton(f, x_root_guess)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$0.69314718056$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "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\n",
       "prompt_number": 11,
       "text": [
        "0.69314718056"
       ]
      }
     ],
     "prompt_number": 11
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Ch.6 Optimization\n",
      "\n",
      "[SciPy Reference](http://docs.scipy.org/doc/scipy/reference/index.html)\n",
      "\n",
      "[Stanford Convex Optimization](http://stanford.edu/~boyd/cvxbook/)"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from scipy import optimize\n",
      "import cvxopt   # convex optimization problem\n",
      "\n",
      "c = np.array([-1.0, 2.0, -3.0])\n",
      "A = np.array([[1.0, 1.0, 0.0],\n",
      "              [-1.0, 3.0, 0.0],\n",
      "              [0.0, -1.0, 1.0]])\n",
      "b = np.array([1.0, 2.0, 3.0])\n",
      "A_ = cvxopt.matrix(A)\n",
      "b_ = cvxopt.matrix(b)\n",
      "c_ = cvxopt.matrix(c)\n",
      "sol = cvxopt.solvers.lp(c_, A_, b_)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 12
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Ch7. Interoplation"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from scipy import interpolate\n",
      "from numpy import polynomial as P\n",
      "\n",
      "# polynomial 1+2x+3x^2\n",
      "p1 = P.Polynomial([1, 2, 3])\n",
      "p1"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 13,
       "text": [
        "Polynomial([ 1.,  2.,  3.], [-1,  1], [-1,  1])"
       ]
      }
     ],
     "prompt_number": 13
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# initialize polynomial from roots -1+x^2\n",
      "p2 = P.Polynomial.fromroots([-1, 1])\n",
      "p2"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 14,
       "text": [
        "Polynomial([-1.,  0.,  1.], [-1.,  1.], [-1.,  1.])"
       ]
      }
     ],
     "prompt_number": 14
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "p1.roots()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 15,
       "text": [
        "array([-0.33333333-0.47140452j, -0.33333333+0.47140452j])"
       ]
      }
     ],
     "prompt_number": 15
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "p2.roots()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 16,
       "text": [
        "array([-1.,  1.])"
       ]
      }
     ],
     "prompt_number": 16
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "p1.coef"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 17,
       "text": [
        "array([ 1.,  2.,  3.])"
       ]
      }
     ],
     "prompt_number": 17
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "p1.domain"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 18,
       "text": [
        "array([-1,  1])"
       ]
      }
     ],
     "prompt_number": 18
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "p1.window"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 19,
       "text": [
        "array([-1,  1])"
       ]
      }
     ],
     "prompt_number": 19
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Chebyshev based polynomial\n",
      "c1 = P.Chebyshev([1, 2, 3])\n",
      "c1"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 20,
       "text": [
        "Chebyshev([ 1.,  2.,  3.], [-1,  1], [-1,  1])"
       ]
      }
     ],
     "prompt_number": 20
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "c1.roots()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 21,
       "text": [
        "array([-0.76759188,  0.43425855])"
       ]
      }
     ],
     "prompt_number": 21
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "f1b = P.Polynomial.fit(x, y, deg)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# 1d interpolation\n",
      "x = np.linspace(-1, 1, 11)\n",
      "y = x**3\n",
      "f_i = interpolate.interp1d(x, y, kind=3)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 24
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# 2d interpolation\n",
      "x = y = np.linspace(-2, 2, 10)\n",
      "X, Y = np.meshgrid(x, y)\n",
      "Z = X**2 + Y**2\n",
      "f_i = interpolcate.interp2d(x, y, Z, kind='cubic')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Ch8. Integration"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from scipy import integrate\n",
      "import sympy\n",
      "\n",
      "a, b, X = sympy.symbols(\"a, b, x\")\n",
      "f = sympy.Function(\"f\")\n",
      "x = a, (a+b)/2, b # for Simpon's rule\n",
      "w = [sympy.symbols(\"w_%d\" %i) for i in range(len(x))]\n",
      "q_rule = sum([w[i] * f(x[i]) for i in range(len(x))])\n",
      "q_rule"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$w_{0} f{\\left (a \\right )} + w_{1} f{\\left (\\frac{a}{2} + \\frac{b}{2} \\right )} + w_{2} f{\\left (b \\right )}$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "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\n",
       "prompt_number": 27,
       "text": [
        "              \u239ba   b\u239e          \n",
        "w\u2080\u22c5f(a) + w\u2081\u22c5f\u239c\u2500 + \u2500\u239f + w\u2082\u22c5f(b)\n",
        "              \u239d2   2\u23a0          "
       ]
      }
     ],
     "prompt_number": 27
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "f = lambda x: np.exp(-x**2)\n",
      "val, err = integrate.quad(f, -np.inf, np.inf)\n",
      "print val, err"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "1.77245385091 1.42026367809e-08\n"
       ]
      }
     ],
     "prompt_number": 28
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Ch9. Ordinary Differential Equation"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "x = sympy.symbols(\"x\")\n",
      "y = sympy.Function(\"y\")\n",
      "f = y(x)**2 + x\n",
      "sympy.Eq(y(x).diff(x), f)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$\\frac{d}{d x} y{\\left (x \\right )} = x + y^{2}{\\left (x \\right )}$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAAIoAAAAfCAYAAAA4LFWUAAAABHNCSVQICAgIfAhkiAAABFdJREFU\neJzt22uIFWUcx/FPtlsrmpeSsBbJC3ZBEkqiy5bIahSChCShJXTFoKi89KLoRVFEJUIvioKMOhIl\nUQhFVBQWRReiDCsoKgwjorIbRpRdtu3Ff447u+05O3POGY+7zRcW55ln5pnf+THzPP/n/zxSUpKB\nQ9otoKQhTsdZmIwe3IHX26ooxVr8gjntFvI/ZyLuSpUvwm/obo+c/zIHu9stosR8/GPgg52EfvHC\nFMa4HNcuxUtFCSnJzEc4E18k5RnJv58X+dB6MUoHbsVX6MTFuBdPFymoJDePYQ82tEvAwyIugSPx\nN6a0S8wop7Ogdq/ARm2clMzHrxiflHvxdrvEjAE2a32wuVS8KNCFmS1ufxC1YpQleAO/J+XFIj6Z\nWqSYMUyn1vYqC3EMnsd0nJ+UC6Ojxvmf8U1yPBEXYg0uwf1FCioZkdl4DkcMOT+5yIfWelG2ikTO\nKjH8PI5F2DFCe7OxHrOSe55I1W3AaViJQ3EuXkzqFmC1mObNxFW4WsRE3SKo3oUTRKy0K9Ova5ys\nelpNVv8m5WizEa87FOzzgzgMN+DDIXUf4MnkeJXoqWAu7jMQkFXwmcg89oicQTqiv7zO8x/Bzpx/\ni4a0kVdPFiqyxRBZ/ctDo17X87kpzhZTaHjB4Gn0FPThmqS8PlX3ACakyk/hneR4BjbhqFT9OTil\nNZKHJa+eLFSM/KLk8S8PjXpdmM/TcbjovvqwPFW3THR18xKh61J1xw1p52vcWec5U3Fls2LrkFdP\nmi2G77V+wsc16hYk92b1Lw/NeF20z9Zhr/jRVTbie9HldYtxcThOEoYsqdN+B25uXmYmsujJQkX2\n6etI/uWhGa8H+VwNZvtzChiO6o84D6/ij1TdQrG62S9mVBMNz2L8ibdS52YbSFcT0f2PNe7fLH93\nuQGvNaGn1YzkXx6a8bqezy3hE9yTKk9IBF2fOlcdN8eLr+XkpPwM3k1dN06Mq2l6RUKwCBrRk4WK\n7D1KFv/y0KjXg3yuNT1uhi9Fyr/KRpFsSn+1e0Q2cSluxPv4S7zRe1PX3SLWMtLMwiutlbyfRvS0\nmiz+5aFRrwf5XG/MW4vbRVeeZz59olgn2ol9YpPNPEwT0y9iCtiL94QR1S7uNvFW7xNf0bN4OdX2\n8SLQK2p+Py2nnqxUkrZ2Z7g2i395aMTrXD63Yv/JOHyLR5tsZ7RT0dhazKjw7zo8lPOerQYnipaL\nN3Zuq0SNUk6Vba1nVPjXIfZersG1eBMrkroeXCb2o6wWKd9tYpxL84PI/MGxIoJeWaToMcao8K/W\n/pNJBhIvFxjI5G0RSaI0K8Q4uEmsVZxRoN6xyEHvX739J10iIIK7cdOBlVZyMFDdj1Jv/0k1KiZW\nIbcnx4Uua5ccXFRflOH2n2wX+0+WiaTNTNHz7Eyuu/SAqSxpO9U8SpfYkLRdDD/dSd0OHC0Wrj5N\n6vrE/yPZhu8OsN6SkpKSkpKSkpKS/fwLyvUqS/hZiogAAAAASUVORK5CYII=\n",
       "prompt_number": 29,
       "text": [
        "d               2   \n",
        "\u2500\u2500(y(x)) = x + y (x)\n",
        "dx                  "
       ]
      }
     ],
     "prompt_number": 29
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sympy.dsolve(y(x).diff(x) - f)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "latex": [
        "$$y{\\left (x \\right )} = \\frac{C_{1}}{C_{2} x - 1}$$"
       ],
       "metadata": {},
       "output_type": "pyout",
       "png": "iVBORw0KGgoAAAANSUhEUgAAAFwAAAAnCAYAAACCCi9aAAAABHNCSVQICAgIfAhkiAAAA8tJREFU\naIHt2mtoHFUUwPGfqWkt1cZHUbEENaG2ohalSMVYKSoqQpWC+AaVCvX9SEUU/eAXoYZiPyiKKFZR\nUakKClrBD8YnFhUfCKJosWLASKVqVOojjR/OLDuZZrdJdnaTzc4fwt7H3Llnzpw599xzQ0HBNGPf\nPG+2T543a2JmYw2OxyD+xDDex9m4b+pEm3ksxqe4KtN+GH4TCi/IiYUYsKeyS2zBfg2TpgXYjHer\n9J/VKEFagQX4T2XrrgttjZxsmtGNWfi4Sn97Um7DA3lM2soK/xEjKod95+NfdOBWrGyMWDObTXg0\n09aOG9GZae/PY8JWj8PbcYdwH99iSFj18/g1c22/wsobSn8eN2llHz4lFAqfQrrwEF7DZZm+dcKv\nzcK5mb5l2CjCppdxMO7C/XhG+MfFyW8zMldEKYPoTeq58IhI4tyCLzJ9n+MFXIr9U+2L8KDy4vsk\nvsGp6MFu8bLg6ipzP4HPJvi3ckJPN804Tdmqt+DFVN+BInN2vXjDaR7GvFR9M7Ym5U5swCFJfQVO\nyk/k5uZwzBHJnGGsTvWtEhuE43BbZtyRmfqAyqnMg0QKtKUp7bJ+Sn4vwh94PXXNCuwQcelQZvz2\nVPlYHIG3Ksw1hENrEbYKI3W6b+5kt7XnCIX9nWo7He9gp9H+O8uZ+AcfpNq6sC0pd+CXCmMfM3F3\nsw5vJ+Wm3cB9JaKLEvOEEm9O6mkfPhd9OCGpv4KPUv1twseXOANL8xS2GcnG4dtFWFeiT2x/S5b0\ns3JC/jzcLnz7EmHN6S/jbjydqh9tz+in0eR6PjkZsp/iEjwuwq5dWC4UukCEeLOFpb6RtPUpu4l7\nhUXvEl/Fq3gz6TtGLMbf1ecxRjEdzicPEImxXvww3kFtYjHdVCeh6sF0OJ+8RhjfCI6qduFzRn/y\nq4W1LqqTYHkz3c4n96rwHWLXSIR323BJfWXKlVrOJ3vEi9qIK7BWpCm6apBnrwq/UPjkDXgWp9Qw\nWaOp5XxyvvKG7ALlnfJTYkM4WcZUeNPGrxmW40MRon45Rn+3WLyGcYNyAqpPuJndYqFfLzZ46zPj\nb1I9+bZVuOQ0IyIy+36cz9BULBRKO7FCfyklsUr56OwlkelM8wlOTsodNco0poXPlHz4gHAB12Xa\nS+eTpWRct8h4EiFqp3gJvUI5S0VIDFfWQ9CZ4lIY3/nkHBGnD4moZY1IZyzD18LVDOMvsWgOTkKO\ny0X29VqR0n5PnDO0ND24c6qFaBXm456pFqKVWCvcT7vifwfrzsX4XWzydop8S0FBQUFBwbj4H7or\nw0auf/b6AAAAAElFTkSuQmCC\n",
       "prompt_number": 30,
       "text": [
        "          C\u2081   \n",
        "y(x) = \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n",
        "       C\u2082\u22c5x - 1"
       ]
      }
     ],
     "prompt_number": 30
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "x = sympy.symbols(\"x\")\n",
      "y = sympy.Function(\"y\")\n",
      "f = y(x)**2 +x\n",
      "f_np = sympy.lambdify((y(x), x), f)\n",
      "\n",
      "y0 = 0\n",
      "xp = np.linspace(0, 1.9, 100)\n",
      "yp = integrate.odeint(f_np, y0, xp)\n",
      "xm = np.linspace(0, -5, 100)\n",
      "ym = integrate.odeint(f_np, y0, xm)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 32
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Ch10. Sparse Matrices and Graphs\n",
      "\n",
      "Graph representation: `sparse.csgraph` and [NetworkX](https://networkx.github.io) libraries."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import scipy.sparse as sp\n",
      "import scipy.sparse.linalg\n",
      "import networkx as nx\n",
      "\n",
      "# coordinate list sparse matrix\n",
      "values = [1, 2, 3, 4]\n",
      "rows = [0, 1, 2, 3]\n",
      "cols = [1, 3, 2, 0]\n",
      "A = sp.coo_matrix((values, (rows, cols)), shape=[4, 4])\n",
      "A.shape"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 3,
       "text": [
        "(4, 4)"
       ]
      }
     ],
     "prompt_number": 3
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "A.toarray()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 4,
       "text": [
        "array([[0, 1, 0, 0],\n",
        "       [0, 0, 0, 2],\n",
        "       [0, 0, 3, 0],\n",
        "       [4, 0, 0, 0]])"
       ]
      }
     ],
     "prompt_number": 4
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Compressed sparse row format\n",
      "A = np.array([[1, 2, 0, 0],\n",
      "              [0, 3, 4, 0],\n",
      "              [0, 0, 5, 6],\n",
      "              [7, 0, 8, 9]])\n",
      "A = sp.csr_matrix(A)\n",
      "print A.data\n",
      "print A.indices  # indices of each row\n",
      "print A.indptr   # start point of each row"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "[1 2 3 4 5 6 7 8 9]\n",
        "[0 1 1 2 2 3 0 2 3]\n",
        "[0 2 4 6 9]\n"
       ]
      }
     ],
     "prompt_number": 5
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# sp.eye: create diagonal sparse matrices with ones on diagonal\n",
      "N = 10\n",
      "A = sp.diags([1, -2, 1], [1, 0, -1], shape=[N, N], format='csc')\n",
      "b = -np.ones(N)\n",
      "x = sp.linalg.spsolve(A, b)\n",
      "x"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 7,
       "text": [
        "array([  5.,   9.,  12.,  14.,  15.,  15.,  14.,  12.,   9.,   5.])"
       ]
      }
     ],
     "prompt_number": 7
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Ch11. PDE\n",
      "\n",
      "[FEniCS](http://fenicsproject.org/documentation/)."
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Ch12. Data Processing\n",
      "\n",
      "* [seaborn](http://stanford.edu/~mwaskom/software/seaborn/): a visualization library for statistical graphs.\n",
      "* [Pandas](http://pandas.pydata.org)\n",
      "* [Statmodels](http://statsmodels.sourceforge.net)\n",
      "* [pasty](https://patsy.readthedocs.org/en/latest/overview.html): R-like statistical models\n",
      "* [scikit-learn](http://scikit-learn.org/stable/): machine learning\n",
      "\n",
      "Different Choices for Indexing in Pandas:\n",
      "* `.loc` is primarily label based, but may also be used wit a boolean array.\n",
      "* `.iloc` is primarily integer position based (from `0` to `length-1` of the axis), but may also be used with a boolean array.\n",
      "* `.ix` supports mixed integer and label based access. However, when an axis is integer based, ONLY label based access and not positional access is supported. Thus, in such cases, it's usually better to be explicit and use `.loc` or `.iloc`.\n",
      "\n",
      "[Pandas Cookbokk](https://github.com/jvns/pandas-cookbook)\n",
      "\n",
      "[ggplot](http://ggplot.yhathq.com/)"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# pandas\n",
      "# data range\n",
      "import pandas as pd\n",
      "pd.date_range(\"2015-1-1\", periods=31)   # start from arg1, with counts arg2\n",
      "pd.date_range(\"2015-1-1\", \"2015-1-2\", freq=\"H\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 4,
       "text": [
        "DatetimeIndex(['2015-01-01 00:00:00', '2015-01-01 01:00:00',\n",
        "               '2015-01-01 02:00:00', '2015-01-01 03:00:00',\n",
        "               '2015-01-01 04:00:00', '2015-01-01 05:00:00',\n",
        "               '2015-01-01 06:00:00', '2015-01-01 07:00:00',\n",
        "               '2015-01-01 08:00:00', '2015-01-01 09:00:00',\n",
        "               '2015-01-01 10:00:00', '2015-01-01 11:00:00',\n",
        "               '2015-01-01 12:00:00', '2015-01-01 13:00:00',\n",
        "               '2015-01-01 14:00:00', '2015-01-01 15:00:00',\n",
        "               '2015-01-01 16:00:00', '2015-01-01 17:00:00',\n",
        "               '2015-01-01 18:00:00', '2015-01-01 19:00:00',\n",
        "               '2015-01-01 20:00:00', '2015-01-01 21:00:00',\n",
        "               '2015-01-01 22:00:00', '2015-01-01 23:00:00',\n",
        "               '2015-01-02 00:00:00'],\n",
        "              dtype='datetime64[ns]', freq='H')"
       ]
      }
     ],
     "prompt_number": 4
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# data frame\n",
      "df_pop = pd.read_csv(\"european_cities.csv\", delimiter=\",\", encoding=\"utf-8\", header=0)\n",
      "df_pop.info()   # basic information about the dataset\n",
      "df_pop.head()   # first few rows of the dataset\n",
      "df_pop[\"NumericPopulation\"] = df_pop.Population.apply(lambda x: int(x.replace(\",\", \"\")))\n",
      "df_pop[\"State\"].apply(lambda x: x.strip())   # remove spaces \n",
      "df_pop.dtypes   # get hte data type of the dataset\n",
      "df_pop2 = df_pop.set_index(\"City\")   # set \"City\" as the index\n",
      "df_pop2 = df_pop2.sort_index()       # sort the data according to index\n",
      "# sort according to columns\n",
      "df_pop2.sort([\"State\", \"NumericPopulation\"], ascending=[False, True])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ts1 = pd.Series(np.arange(31), index=pd.date_range(\"2015-1-1\", periods=31))\n",
      "ts1.head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 5,
       "text": [
        "2015-01-01    0\n",
        "2015-01-02    1\n",
        "2015-01-03    2\n",
        "2015-01-04    3\n",
        "2015-01-05    4\n",
        "Freq: D, dtype: int64"
       ]
      }
     ],
     "prompt_number": 5
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ts1.index[2]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 6,
       "text": [
        "Timestamp('2015-01-03 00:00:00', offset='D')"
       ]
      }
     ],
     "prompt_number": 6
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ts1['2015-1-3']"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 8,
       "text": [
        "2"
       ]
      }
     ],
     "prompt_number": 8
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ts1.index[2].year, ts1.index[2].month, ts1.index[2].day"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 9,
       "text": [
        "(2015, 1, 3)"
       ]
      }
     ],
     "prompt_number": 9
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "periods = pd.PeriodIndex([pd.Period(\"2015-01\"), pd.Period(\"2015-02\"), pd.Period(\"2015-03\")])\n",
      "ts3 = pd.Series(np.random.rand(3), index=periods)\n",
      "ts3"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 11,
       "text": [
        "2015-01    0.434982\n",
        "2015-02    0.480390\n",
        "2015-03    0.469083\n",
        "Freq: M, dtype: float64"
       ]
      }
     ],
     "prompt_number": 11
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ts3.index"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 12,
       "text": [
        "PeriodIndex(['2015-01', '2015-02', '2015-03'], dtype='int64', freq='M')"
       ]
      }
     ],
     "prompt_number": 12
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ts1.to_period(\"M\")  # change ts1 inde to period case"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 14,
       "text": [
        "2015-01     0\n",
        "2015-01     1\n",
        "2015-01     2\n",
        "2015-01     3\n",
        "2015-01     4\n",
        "2015-01     5\n",
        "2015-01     6\n",
        "2015-01     7\n",
        "2015-01     8\n",
        "2015-01     9\n",
        "2015-01    10\n",
        "2015-01    11\n",
        "2015-01    12\n",
        "2015-01    13\n",
        "2015-01    14\n",
        "2015-01    15\n",
        "2015-01    16\n",
        "2015-01    17\n",
        "2015-01    18\n",
        "2015-01    19\n",
        "2015-01    20\n",
        "2015-01    21\n",
        "2015-01    22\n",
        "2015-01    23\n",
        "2015-01    24\n",
        "2015-01    25\n",
        "2015-01    26\n",
        "2015-01    27\n",
        "2015-01    28\n",
        "2015-01    29\n",
        "2015-01    30\n",
        "Freq: M, dtype: int64"
       ]
      }
     ],
     "prompt_number": 14
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Ch13. Statistics\n",
      "\n",
      "Methods for discrete and continous random variables in the SciPy stats module:\n",
      "* pdf/pmf: probability distribution (mass) function\n",
      "* cdf: cumulative distribution function\n",
      "* sf: survival function (1-cdf)\n",
      "* ppf: percent-point function (inverse of cdf)\n",
      "* moment: non-central moments of nth order\n",
      "* stats: statistics of the distribution \n",
      "* fit: fit distribution to data using a numerical maximum likelihood optimization\n",
      "* expect: expectation value of a function w.r.t the distribution\n",
      "* interval: the endpoints of the interval that contains a given percentage of the distribution\n",
      "* rvs: random variable samples.\n",
      "\n",
      "\n",
      "If p-value is smaller than certain percentage, we reject the null hypothesis.\n",
      "\n",
      "If p-value is larger, we fail to reject the null hypothesis.\n",
      "\n",
      "Summary of common hypothesis test cases with the corresponding distribution and SciPy functions:\n",
      "* stats.ttest_1samp: test if the mean of a population is a given value (stats.norm or stats.t)\n",
      "* stats.ttest_ind, stats.ttest_rel: test if the means of two random variables are equal (independent or paired samples)(stats.t)\n",
      "* stats.kstest: test goodness of fit of a continuous distribution data ( Kolmogorov-Smirnov distribution)\n",
      "* stats.chisquare: test if categorical data occur with given frequency (stats.chi2)\n",
      "* stats.chi2_contigency: test for independence of categorical variables in a contigency table (stats.chi2)\n",
      "* stats.barlett, stats.levene: test for euqal variance in samples of two or more variables (stat.f)\n",
      "* stats.pearsonr, stats.spearmanr: test for non-correlation between two variables (stats.beta, stats.mstats.betai)\n",
      "* stats.f_oneway, stats.kruskal: test if two or more variables have the same population mean (F distribution)\n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from scipy import stats\n",
      "from scipy import optimize\n",
      "\n",
      "print np.random.rand()  # generate uniformly distributed random number in [0, 1)\n",
      "print np.random.randn() # generate random number from standard normal distribution\n",
      "# np.random.randint(): generate uniformluy distributed random number from\n",
      "# given low and high.\n",
      "print np.random.rand(5)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "0.294608281196\n",
        "1.07991351307\n",
        "[ 0.7227044   0.21361159  0.39077342  0.6148829   0.07432089]\n"
       ]
      }
     ],
     "prompt_number": 1
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "np.random.randint(low=2, high=5, size=(3, 2))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 2,
       "text": [
        "array([[4, 4],\n",
        "       [4, 4],\n",
        "       [4, 4]])"
       ]
      }
     ],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# randomly chooe 5 numbers from 0 to 10 (exclusive) without replacement\n",
      "np.random.choice(10, 5, replace=False)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 4,
       "text": [
        "array([5, 3, 1, 8, 0])"
       ]
      }
     ],
     "prompt_number": 4
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "x = stats.norm(1, 0.5)  # mean 1, std 0.5\n",
      "print x.mean()\n",
      "print x.std()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "1.0\n",
        "0.5\n"
       ]
      }
     ],
     "prompt_number": 5
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "[x.moment(n) for n in range(5)]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 6,
       "text": [
        "[1.0, 1.0, 1.25, 1.75, 2.6875]"
       ]
      }
     ],
     "prompt_number": 6
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "x.pdf([0, 1, 2])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 7,
       "text": [
        "array([ 0.10798193,  0.79788456,  0.10798193])"
       ]
      }
     ],
     "prompt_number": 7
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "x.interval(0.95)  # compute the lower and upper values of x such that \n",
      "# a given percentage of the probability distribution falls within the interval."
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 8,
       "text": [
        "(0.020018007729972975, 1.979981992270027)"
       ]
      }
     ],
     "prompt_number": 8
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "x.rvs(5)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 9,
       "text": [
        "array([ 0.44174901,  0.77940857,  0.44253627,  1.43323624,  0.51790096])"
       ]
      }
     ],
     "prompt_number": 9
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "x = stats.chi2(df=5)\n",
      "x_samples = x.rvs(500)\n",
      "df, loc, scale = stats.chi2.fit(x_samples) # degree of freedom, mean, std"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 10
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Ch14. Statistical Modeling\n",
      "\n",
      "* [Statsmodels](http://statsmodels.sourceforge.net): provides a rich set of functionality related to statistical tests and modeling\n",
      "* [Patsy](http://patsy.readthedocs.org): provides features for defining statistical models with a simple [formula](https://patsy.readthedocs.org/en/v0.4.1/formulas.html) language inspired by R-like software"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import statsmodels.api as sm\n",
      "import statsmodels.formula.api as smf\n",
      "import statsmodels.graphics.api as smg\n",
      "import patsy\n",
      "\n",
      "y = np.array([1, 2, 3, 4, 5])\n",
      "x1 = np.array([6, 7, 8, 9, 10])\n",
      "x2 = np.array([11, 12, 13, 14, 15])\n",
      "X = np.vstack([np.ones(5), x1, x2, x1*x2]).T\n",
      "data = {\"y\": y, \"x1\": x1, \"x2\": x2}\n",
      "y, X = patsy.dmatrices(\"y ~ 1 + x1 +x2 + x1*x2\", data)\n",
      "y"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 3,
       "text": [
        "DesignMatrix with shape (5, 1)\n",
        "  y\n",
        "  1\n",
        "  2\n",
        "  3\n",
        "  4\n",
        "  5\n",
        "  Terms:\n",
        "    'y' (column 0)"
       ]
      }
     ],
     "prompt_number": 3
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "X"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 4,
       "text": [
        "DesignMatrix with shape (5, 4)\n",
        "  Intercept  x1  x2  x1:x2\n",
        "          1   6  11     66\n",
        "          1   7  12     84\n",
        "          1   8  13    104\n",
        "          1   9  14    126\n",
        "          1  10  15    150\n",
        "  Terms:\n",
        "    'Intercept' (column 0)\n",
        "    'x1' (column 1)\n",
        "    'x2' (column 2)\n",
        "    'x1:x2' (column 3)"
       ]
      }
     ],
     "prompt_number": 4
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "np.array(X)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 5,
       "text": [
        "array([[   1.,    6.,   11.,   66.],\n",
        "       [   1.,    7.,   12.,   84.],\n",
        "       [   1.,    8.,   13.,  104.],\n",
        "       [   1.,    9.,   14.,  126.],\n",
        "       [   1.,   10.,   15.,  150.]])"
       ]
      }
     ],
     "prompt_number": 5
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import pandas as pd\n",
      "df_data = pd.DataFrame(data)\n",
      "y, X = patsy.dmatrices(\"y ~ 1 + x1 +x2 + x1:x2\", df_data, return_type='dataframe')\n",
      "X"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Intercept</th>\n",
        "      <th>x1</th>\n",
        "      <th>x2</th>\n",
        "      <th>x1:x2</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td>1</td>\n",
        "      <td>6</td>\n",
        "      <td>11</td>\n",
        "      <td>66</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td>1</td>\n",
        "      <td>7</td>\n",
        "      <td>12</td>\n",
        "      <td>84</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td>1</td>\n",
        "      <td>8</td>\n",
        "      <td>13</td>\n",
        "      <td>104</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td>1</td>\n",
        "      <td>9</td>\n",
        "      <td>14</td>\n",
        "      <td>126</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td>1</td>\n",
        "      <td>10</td>\n",
        "      <td>15</td>\n",
        "      <td>150</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 9,
       "text": [
        "   Intercept  x1  x2  x1:x2\n",
        "0          1   6  11     66\n",
        "1          1   7  12     84\n",
        "2          1   8  13    104\n",
        "3          1   9  14    126\n",
        "4          1  10  15    150"
       ]
      }
     ],
     "prompt_number": 9
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# OLS in statsmodel\n",
      "model = sm.OLS(y, X)\n",
      "result = model.fit()\n",
      "result.params"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 10,
       "text": [
        "Intercept   -5.555556e-01\n",
        "x1           1.888889e+00\n",
        "x2          -8.888889e-01\n",
        "x1:x2       -1.221245e-15\n",
        "dtype: float64"
       ]
      }
     ],
     "prompt_number": 10
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# use formula\n",
      "model = smf.ols(\"y ~ 1 + x1 + x2 + x1:x2\", df_data)\n",
      "result = model.fit()\n",
      "result.params"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 11,
       "text": [
        "Intercept   -5.555556e-01\n",
        "x1           1.888889e+00\n",
        "x2          -8.888889e-01\n",
        "x1:x2       -1.221245e-15\n",
        "dtype: float64"
       ]
      }
     ],
     "prompt_number": 11
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# linear regression\n",
      "N = 100\n",
      "x1 = np.random.randn(N)\n",
      "x2 = np.random.randn(N)\n",
      "data = pd.DataFrame({\"x1\": x1, \"x2\": x2})\n",
      "data[\"y_true\"] = 1 + 2 *x1 + 3 * x2 + 4 * x1 * x2\n",
      "e = 0.5 * np.random.randn(N)\n",
      "data[\"y\"] = data[\"y_true\"] + e\n",
      "model = smf.ols(\"y ~ x1 + x2\", data)\n",
      "result = model.fit()\n",
      "result.summary()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<table class=\"simpletable\">\n",
        "<caption>OLS Regression Results</caption>\n",
        "<tr>\n",
        "  <th>Dep. Variable:</th>            <td>y</td>        <th>  R-squared:         </th> <td>   0.530</td>\n",
        "</tr>\n",
        "<tr>\n",
        "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.520</td>\n",
        "</tr>\n",
        "<tr>\n",
        "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   54.70</td>\n",
        "</tr>\n",
        "<tr>\n",
        "  <th>Date:</th>             <td>Mon, 15 Feb 2016</td> <th>  Prob (F-statistic):</th> <td>1.24e-16</td>\n",
        "</tr>\n",
        "<tr>\n",
        "  <th>Time:</th>                 <td>22:53:44</td>     <th>  Log-Likelihood:    </th> <td> -261.45</td>\n",
        "</tr>\n",
        "<tr>\n",
        "  <th>No. Observations:</th>      <td>   100</td>      <th>  AIC:               </th> <td>   528.9</td>\n",
        "</tr>\n",
        "<tr>\n",
        "  <th>Df Residuals:</th>          <td>    97</td>      <th>  BIC:               </th> <td>   536.7</td>\n",
        "</tr>\n",
        "<tr>\n",
        "  <th>Df Model:</th>              <td>     2</td>      <th>                     </th>     <td> </td>   \n",
        "</tr>\n",
        "</table>\n",
        "<table class=\"simpletable\">\n",
        "<tr>\n",
        "      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th> <th>[95.0% Conf. Int.]</th> \n",
        "</tr>\n",
        "<tr>\n",
        "  <th>Intercept</th> <td>    1.2724</td> <td>    0.338</td> <td>    3.766</td> <td> 0.000</td> <td>    0.602     1.943</td>\n",
        "</tr>\n",
        "<tr>\n",
        "  <th>x1</th>        <td>    2.0377</td> <td>    0.356</td> <td>    5.718</td> <td> 0.000</td> <td>    1.330     2.745</td>\n",
        "</tr>\n",
        "<tr>\n",
        "  <th>x2</th>        <td>    2.7865</td> <td>    0.335</td> <td>    8.320</td> <td> 0.000</td> <td>    2.122     3.451</td>\n",
        "</tr>\n",
        "</table>\n",
        "<table class=\"simpletable\">\n",
        "<tr>\n",
        "  <th>Omnibus:</th>       <td> 6.336</td> <th>  Durbin-Watson:     </th> <td>   1.989</td>\n",
        "</tr>\n",
        "<tr>\n",
        "  <th>Prob(Omnibus):</th> <td> 0.042</td> <th>  Jarque-Bera (JB):  </th> <td>   8.805</td>\n",
        "</tr>\n",
        "<tr>\n",
        "  <th>Skew:</th>          <td> 0.234</td> <th>  Prob(JB):          </th> <td>  0.0122</td>\n",
        "</tr>\n",
        "<tr>\n",
        "  <th>Kurtosis:</th>      <td> 4.376</td> <th>  Cond. No.          </th> <td>    1.16</td>\n",
        "</tr>\n",
        "</table>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 14,
       "text": [
        "<class 'statsmodels.iolib.summary.Summary'>\n",
        "\"\"\"\n",
        "                            OLS Regression Results                            \n",
        "==============================================================================\n",
        "Dep. Variable:                      y   R-squared:                       0.530\n",
        "Model:                            OLS   Adj. R-squared:                  0.520\n",
        "Method:                 Least Squares   F-statistic:                     54.70\n",
        "Date:                Mon, 15 Feb 2016   Prob (F-statistic):           1.24e-16\n",
        "Time:                        22:53:44   Log-Likelihood:                -261.45\n",
        "No. Observations:                 100   AIC:                             528.9\n",
        "Df Residuals:                      97   BIC:                             536.7\n",
        "Df Model:                           2                                         \n",
        "==============================================================================\n",
        "                 coef    std err          t      P>|t|      [95.0% Conf. Int.]\n",
        "------------------------------------------------------------------------------\n",
        "Intercept      1.2724      0.338      3.766      0.000         0.602     1.943\n",
        "x1             2.0377      0.356      5.718      0.000         1.330     2.745\n",
        "x2             2.7865      0.335      8.320      0.000         2.122     3.451\n",
        "==============================================================================\n",
        "Omnibus:                        6.336   Durbin-Watson:                   1.989\n",
        "Prob(Omnibus):                  0.042   Jarque-Bera (JB):                8.805\n",
        "Skew:                           0.234   Prob(JB):                       0.0122\n",
        "Kurtosis:                       4.376   Cond. No.                         1.16\n",
        "==============================================================================\n",
        "\"\"\""
       ]
      }
     ],
     "prompt_number": 14
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from scipy import stats\n",
      "# check for normality\n",
      "z, p = stats.normaltest(result.fittedvalues.values)\n",
      "p"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 16,
       "text": [
        "0.86627625368873251"
       ]
      }
     ],
     "prompt_number": 16
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "fig, ax = plt.subplots(figsize=(8, 4))\n",
      "smg.qqplot(result.resid, ax= ax)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "png": "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\nMAlCHQAAk/j/WDrI8mdCk4oAAAAASUVORK5CYII=\n",
       "prompt_number": 18,
       "text": [
        "<matplotlib.figure.Figure at 0x7fd1edbd5d10>"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\nMAlCHQAAk/j/WDrI8mdCk4oAAAAASUVORK5CYII=\n",
       "text": [
        "<matplotlib.figure.Figure at 0x7fd1edbd5d10>"
       ]
      }
     ],
     "prompt_number": 18
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# logistic regression\n",
      "df = sm.datasets.get_rdataset(\"iris\").data\n",
      "df.info()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "<class 'pandas.core.frame.DataFrame'>\n",
        "Int64Index: 150 entries, 0 to 149\n",
        "Data columns (total 5 columns):\n",
        "Sepal.Length    150 non-null float64\n",
        "Sepal.Width     150 non-null float64\n",
        "Petal.Length    150 non-null float64\n",
        "Petal.Width     150 non-null float64\n",
        "Species         150 non-null object\n",
        "dtypes: float64(4), object(1)\n",
        "memory usage: 7.0+ KB\n"
       ]
      }
     ],
     "prompt_number": 19
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df.Species.unique()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 21,
       "text": [
        "array(['setosa', 'versicolor', 'virginica'], dtype=object)"
       ]
      }
     ],
     "prompt_number": 21
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df_subset = df[(df.Species == \"versicolor\") | (df.Species == \"virginica\")].copy()\n",
      "df_subset.Species = df_subset.Species.map({\"versicolor\": 1, \"virginica\":0})\n",
      "df_subset.rename(columns={\"Sepal.Length\": \"Sepal_Length\",\n",
      "                          \"Sepal.Width\": \"Sepal_Width\",\n",
      "                          \"Petal.Length\": \"Petal_Length\",\n",
      "                          \"Petal.Width\": \"Petal_Width\"}, inplace=True)\n",
      "df_subset.head(3)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Sepal_Length</th>\n",
        "      <th>Sepal_Width</th>\n",
        "      <th>Petal_Length</th>\n",
        "      <th>Petal_Width</th>\n",
        "      <th>Species</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>50</th>\n",
        "      <td>7.0</td>\n",
        "      <td>3.2</td>\n",
        "      <td>4.7</td>\n",
        "      <td>1.4</td>\n",
        "      <td>1</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>51</th>\n",
        "      <td>6.4</td>\n",
        "      <td>3.2</td>\n",
        "      <td>4.5</td>\n",
        "      <td>1.5</td>\n",
        "      <td>1</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>52</th>\n",
        "      <td>6.9</td>\n",
        "      <td>3.1</td>\n",
        "      <td>4.9</td>\n",
        "      <td>1.5</td>\n",
        "      <td>1</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 24,
       "text": [
        "    Sepal_Length  Sepal_Width  Petal_Length  Petal_Width  Species\n",
        "50           7.0          3.2           4.7          1.4        1\n",
        "51           6.4          3.2           4.5          1.5        1\n",
        "52           6.9          3.1           4.9          1.5        1"
       ]
      }
     ],
     "prompt_number": 24
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# log model\n",
      "model = smf.logit(\"Species ~ Petal_Length + Petal_Width\", data=df_subset)\n",
      "result = model.fit()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Optimization terminated successfully.\n",
        "         Current function value: 0.102818\n",
        "         Iterations 10\n"
       ]
      }
     ],
     "prompt_number": 25
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "result.summary()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<table class=\"simpletable\">\n",
        "<caption>Logit Regression Results</caption>\n",
        "<tr>\n",
        "  <th>Dep. Variable:</th>      <td>Species</td>     <th>  No. Observations:  </th>  <td>   100</td>  \n",
        "</tr>\n",
        "<tr>\n",
        "  <th>Model:</th>               <td>Logit</td>      <th>  Df Residuals:      </th>  <td>    97</td>  \n",
        "</tr>\n",
        "<tr>\n",
        "  <th>Method:</th>               <td>MLE</td>       <th>  Df Model:          </th>  <td>     2</td>  \n",
        "</tr>\n",
        "<tr>\n",
        "  <th>Date:</th>          <td>Mon, 15 Feb 2016</td> <th>  Pseudo R-squ.:     </th>  <td>0.8517</td>  \n",
        "</tr>\n",
        "<tr>\n",
        "  <th>Time:</th>              <td>23:11:55</td>     <th>  Log-Likelihood:    </th> <td> -10.282</td> \n",
        "</tr>\n",
        "<tr>\n",
        "  <th>converged:</th>           <td>True</td>       <th>  LL-Null:           </th> <td> -69.315</td> \n",
        "</tr>\n",
        "<tr>\n",
        "  <th> </th>                      <td> </td>        <th>  LLR p-value:       </th> <td>2.303e-26</td>\n",
        "</tr>\n",
        "</table>\n",
        "<table class=\"simpletable\">\n",
        "<tr>\n",
        "        <td></td>          <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th> <th>[95.0% Conf. Int.]</th> \n",
        "</tr>\n",
        "<tr>\n",
        "  <th>Intercept</th>    <td>   45.2723</td> <td>   13.612</td> <td>    3.326</td> <td> 0.001</td> <td>   18.594    71.951</td>\n",
        "</tr>\n",
        "<tr>\n",
        "  <th>Petal_Length</th> <td>   -5.7545</td> <td>    2.306</td> <td>   -2.496</td> <td> 0.013</td> <td>  -10.274    -1.235</td>\n",
        "</tr>\n",
        "<tr>\n",
        "  <th>Petal_Width</th>  <td>  -10.4467</td> <td>    3.756</td> <td>   -2.782</td> <td> 0.005</td> <td>  -17.808    -3.086</td>\n",
        "</tr>\n",
        "</table>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 26,
       "text": [
        "<class 'statsmodels.iolib.summary.Summary'>\n",
        "\"\"\"\n",
        "                           Logit Regression Results                           \n",
        "==============================================================================\n",
        "Dep. Variable:                Species   No. Observations:                  100\n",
        "Model:                          Logit   Df Residuals:                       97\n",
        "Method:                           MLE   Df Model:                            2\n",
        "Date:                Mon, 15 Feb 2016   Pseudo R-squ.:                  0.8517\n",
        "Time:                        23:11:55   Log-Likelihood:                -10.282\n",
        "converged:                       True   LL-Null:                       -69.315\n",
        "                                        LLR p-value:                 2.303e-26\n",
        "================================================================================\n",
        "                   coef    std err          z      P>|z|      [95.0% Conf. Int.]\n",
        "--------------------------------------------------------------------------------\n",
        "Intercept       45.2723     13.612      3.326      0.001        18.594    71.951\n",
        "Petal_Length    -5.7545      2.306     -2.496      0.013       -10.274    -1.235\n",
        "Petal_Width    -10.4467      3.756     -2.782      0.005       -17.808    -3.086\n",
        "================================================================================\n",
        "\"\"\""
       ]
      }
     ],
     "prompt_number": 26
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "result.get_margeff().summary()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/opt/anaconda/envs/np18py27-1.9/lib/python2.7/site-packages/statsmodels/discrete/discrete_model.py:430: FutureWarning: comparison to `None` will result in an elementwise object comparison in the future.\n",
        "  if exog == None:\n"
       ]
      },
      {
       "html": [
        "<table class=\"simpletable\">\n",
        "<caption>Logit Marginal Effects</caption>\n",
        "<tr>\n",
        "  <th>Dep. Variable:</th> <td>Species</td>\n",
        "</tr>\n",
        "<tr>\n",
        "  <th>Method:</th>         <td>dydx</td>  \n",
        "</tr>\n",
        "<tr>\n",
        "  <th>At:</th>            <td>overall</td>\n",
        "</tr>\n",
        "</table>\n",
        "<table class=\"simpletable\">\n",
        "<tr>\n",
        "        <th></th>          <th>dy/dx</th>    <th>std err</th>      <th>z</th>      <th>P>|z|</th> <th>[95.0% Conf. Int.]</th> \n",
        "</tr>\n",
        "<tr>\n",
        "  <th>Petal_Length</th> <td>   -0.1736</td> <td>    0.052</td> <td>   -3.347</td> <td> 0.001</td> <td>   -0.275    -0.072</td>\n",
        "</tr>\n",
        "<tr>\n",
        "  <th>Petal_Width</th>  <td>   -0.3151</td> <td>    0.068</td> <td>   -4.608</td> <td> 0.000</td> <td>   -0.449    -0.181</td>\n",
        "</tr>\n",
        "</table>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 27,
       "text": [
        "<class 'statsmodels.iolib.summary.Summary'>\n",
        "\"\"\"\n",
        "        Logit Marginal Effects       \n",
        "=====================================\n",
        "Dep. Variable:                Species\n",
        "Method:                          dydx\n",
        "At:                           overall\n",
        "================================================================================\n",
        "                  dy/dx    std err          z      P>|z|      [95.0% Conf. Int.]\n",
        "--------------------------------------------------------------------------------\n",
        "Petal_Length    -0.1736      0.052     -3.347      0.001        -0.275    -0.072\n",
        "Petal_Width     -0.3151      0.068     -4.608      0.000        -0.449    -0.181\n",
        "================================================================================\n",
        "\"\"\""
       ]
      }
     ],
     "prompt_number": 27
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Time Series\n",
      "df = pd.read_csv(\"temperature_outdoor_2014.tsv\", header=None, delimiter=\"\\t\",\n",
      "                 names=[\"time\", \"temp\"])\n",
      "df.time = pd.to_datetime(df.time, unit=\"s\")\n",
      "df = df.set_index(\"time\").resample(\"H\")\n",
      "df_march = df[df.index.month==3]\n",
      "model = sm.tsa.AR(df_march.temp)\n",
      "result = model.fit(72)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Ch15. Machine Learning\n",
      "\n",
      "* [scikit-learn](http://scikit-learn.org/stable/)\n",
      "* [Natural Language Toolkit](http://www.nltk.org)"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from sklearn import datasets\n",
      "from sklearn import cross_validation\n",
      "from sklearn import linear_model\n",
      "from sklearn import metrics\n",
      "from sklearn import tree\n",
      "from sklearn import neighbors\n",
      "from sklearn import svm\n",
      "from sklearn import ensemble\n",
      "from sklearn import cluster\n",
      "import matplotlib.pyplot as plt\n",
      "\n",
      "X_all, y_all = datasets.make_regression(n_samples=50, n_features=50, n_informative=10)\n",
      "X_train, X_test, y_train, y_test = cross_validation.train_test_split(X_all, y_all, train_size=0.5)\n",
      "model = linear_model.LinearRegression()\n",
      "model.fit(X_train, y_train)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Ch16. Bayesian Statistics\n",
      "\n",
      "* [PyMC](https://pymc-devs.github.io/pymc/): provides a framework for doing probabilistic programming-that is solving statistical problems using simulation with Bayesian methods.\n",
      "* [Probabilistic Programming & Bayesian Methods for Hackers](http://camdavidsonpilon.github.io/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/): computationally introduction of Bayesian methods with Python\n",
      "* [Difference between the Bayesian and frequentist's approches](http://arxiv.org/pdf/1411.5018.pdf)\n",
      "\n",
      "Key steps in probabilistic programming:\n",
      "* Create a statistical model\n",
      "* Sample from the posterior distribution for the quantity of interest using an MCMC method\n",
      "* Use the obtained posterior distribution to compute properties of interest for the problem at hand, and make inference decisions based on the obtained results."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "imort pymc3 as mc\n",
      "from scipy import stats\n",
      "import statsmodels.api as sm\n",
      "import statsmodels.formula.api as smf\n",
      "import seaborn as sns\n",
      "\n",
      "mu = 4.0\n",
      "sigma = 2.0\n",
      "model = mc.Model()\n",
      "with model:\n",
      "    mc.Normal('X', mu, 1/sigma**2)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# MCMC sampling method\n",
      "with model:\n",
      "    start = mc.find_MAP()  # find point in the parameter space that corresponds to the maxixmum of the posteriro distribution.\n",
      "with model:\n",
      "    step = mc.Metropolis()\n",
      "    trace = mc.sample(10000, start=start, step=step)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# linear regression\n",
      "with mc.Model() as model:\n",
      "    sigma = mc.Uniform('sigma', 0, 10)\n",
      "    intercept = mc.Normal('intercept', 125, sd=30)\n",
      "    beta = mc.Normal('beta', 0, sd=5)\n",
      "    height_mu = intercept + beta * data.weight\n",
      "    mc.Normal('height', mu=height_mu, sd=sigma, observed=data.height)\n",
      "    predict_height = mc.Normal('predict_height', mu=intercept + beta * x, sd=sigma,\n",
      "                               shape=len(x))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Ch17. Signal Processing\n",
      "\n",
      "* [Python-oriented discussion of signal processing](http://nbviewer.jupyter.org/github/unpingco/Python-for-Signal-Processing/tree/master/)\n",
      "* [The Scientist and Engineer's Guide to\n",
      "Digital Signal Processing](http://www.dspguide.com/pdfbook.htm)\n",
      "\n",
      "Summary of selected functions from the `fftpack` module in SciPy:\n",
      "* fft, ifft: general FFT and inverse FFT for a real or complex valued signal.\n",
      "* rfft, irfft: FFT and inverse FFT of a real-valued signal\n",
      "* dct, idct: discrete cosine transform (DST) and its inverse\n",
      "* dst, idst: discrete sine transform (DST) and its inverse\n",
      "* fft2, ifft2, fftn, ifftn: 2-dimensional and n-dimensinal FFT for complex-valued signals, and their inverses\n",
      "* fftshift, ifftshift, rfftshift, irfftshift: shift the frequency bins in the result vector produced by `fft` and `rfft`, so that the spectrum is arranged such that the zero-frequency component is in the midd"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from scipy import fftpack\n",
      "from scipy import signal\n",
      "import scipy.io.wavfile\n",
      "from scipy import io"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Ch18. Data Input and Output\n",
      "\n",
      "* [h5py](http://www.h5py.org): provides a Pythonic interface to the HDF5 file format and a NumPy-like interface to its datasets.\n",
      "* [PyTables](http://pytables.github.io): provides a database-like data model on top of HDF5."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import h5py  # HDF5 format\n",
      "import tables \n",
      "import pickle \n",
      "import msgpack \n",
      "\n",
      "np.loadtxt(\"data.csv\")\n",
      "np.savetxt(\"data.csv\", data, delimiter=\",\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "#HDF5\n",
      "f = h5py.File(\"data.h5\", mode=\"w\")\n",
      "f.flush()\n",
      "f.close()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# PyTables\n",
      "f = tables.open_file(\"test.h5\", mode=\"w\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Ch19. Code Optimization\n",
      "\n",
      "* [Numba](http://numba.pydata.org) is a just-in-time (JIT) compliler for Python code using NumPy that produces machine code that can be executed more fficiently than the original Python COde.\n",
      "* [Cython](http://cyton.org) is a superset of the Python language that can be automatically translated into C or C++ and complied into a machine code, which can run much faster than Python code."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import numba      # for Numba\n",
      "import pyximport  # for Cython"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    }
   ],
   "metadata": {}
  }
 ]
}